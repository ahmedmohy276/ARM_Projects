
FOTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080020f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003bf4  20000014  08002108  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20003c08  08002108  00023c08  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000238d  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b62  00000000  00000000  000223ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000358  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00023288  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000010b1  00000000  00000000  00023528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000116b  00000000  00000000  000245d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00025744  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c54  00000000  00000000  000257c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00026414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd8 	.word	0x08001fd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001fd8 	.word	0x08001fd8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_d2f>:
 80004bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004c4:	bf24      	itt	cs
 80004c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004ce:	d90d      	bls.n	80004ec <__aeabi_d2f+0x30>
 80004d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004f0:	d121      	bne.n	8000536 <__aeabi_d2f+0x7a>
 80004f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80004f6:	bfbc      	itt	lt
 80004f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80004fc:	4770      	bxlt	lr
 80004fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000502:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000506:	f1c2 0218 	rsb	r2, r2, #24
 800050a:	f1c2 0c20 	rsb	ip, r2, #32
 800050e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000512:	fa20 f002 	lsr.w	r0, r0, r2
 8000516:	bf18      	it	ne
 8000518:	f040 0001 	orrne.w	r0, r0, #1
 800051c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000520:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000524:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000528:	ea40 000c 	orr.w	r0, r0, ip
 800052c:	fa23 f302 	lsr.w	r3, r3, r2
 8000530:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000534:	e7cc      	b.n	80004d0 <__aeabi_d2f+0x14>
 8000536:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800053a:	d107      	bne.n	800054c <__aeabi_d2f+0x90>
 800053c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000540:	bf1e      	ittt	ne
 8000542:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000546:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800054a:	4770      	bxne	lr
 800054c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000550:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000554:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <__aeabi_frsub>:
 800055c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000560:	e002      	b.n	8000568 <__addsf3>
 8000562:	bf00      	nop

08000564 <__aeabi_fsub>:
 8000564:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000568 <__addsf3>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	bf1f      	itttt	ne
 800056c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000570:	ea92 0f03 	teqne	r2, r3
 8000574:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000578:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800057c:	d06a      	beq.n	8000654 <__addsf3+0xec>
 800057e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000582:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000586:	bfc1      	itttt	gt
 8000588:	18d2      	addgt	r2, r2, r3
 800058a:	4041      	eorgt	r1, r0
 800058c:	4048      	eorgt	r0, r1
 800058e:	4041      	eorgt	r1, r0
 8000590:	bfb8      	it	lt
 8000592:	425b      	neglt	r3, r3
 8000594:	2b19      	cmp	r3, #25
 8000596:	bf88      	it	hi
 8000598:	4770      	bxhi	lr
 800059a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800059e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005a6:	bf18      	it	ne
 80005a8:	4240      	negne	r0, r0
 80005aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005b6:	bf18      	it	ne
 80005b8:	4249      	negne	r1, r1
 80005ba:	ea92 0f03 	teq	r2, r3
 80005be:	d03f      	beq.n	8000640 <__addsf3+0xd8>
 80005c0:	f1a2 0201 	sub.w	r2, r2, #1
 80005c4:	fa41 fc03 	asr.w	ip, r1, r3
 80005c8:	eb10 000c 	adds.w	r0, r0, ip
 80005cc:	f1c3 0320 	rsb	r3, r3, #32
 80005d0:	fa01 f103 	lsl.w	r1, r1, r3
 80005d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d8:	d502      	bpl.n	80005e0 <__addsf3+0x78>
 80005da:	4249      	negs	r1, r1
 80005dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005e4:	d313      	bcc.n	800060e <__addsf3+0xa6>
 80005e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ea:	d306      	bcc.n	80005fa <__addsf3+0x92>
 80005ec:	0840      	lsrs	r0, r0, #1
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	f102 0201 	add.w	r2, r2, #1
 80005f6:	2afe      	cmp	r2, #254	; 0xfe
 80005f8:	d251      	bcs.n	800069e <__addsf3+0x136>
 80005fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000602:	bf08      	it	eq
 8000604:	f020 0001 	biceq.w	r0, r0, #1
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	4770      	bx	lr
 800060e:	0049      	lsls	r1, r1, #1
 8000610:	eb40 0000 	adc.w	r0, r0, r0
 8000614:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000618:	f1a2 0201 	sub.w	r2, r2, #1
 800061c:	d1ed      	bne.n	80005fa <__addsf3+0x92>
 800061e:	fab0 fc80 	clz	ip, r0
 8000622:	f1ac 0c08 	sub.w	ip, ip, #8
 8000626:	ebb2 020c 	subs.w	r2, r2, ip
 800062a:	fa00 f00c 	lsl.w	r0, r0, ip
 800062e:	bfaa      	itet	ge
 8000630:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000634:	4252      	neglt	r2, r2
 8000636:	4318      	orrge	r0, r3
 8000638:	bfbc      	itt	lt
 800063a:	40d0      	lsrlt	r0, r2
 800063c:	4318      	orrlt	r0, r3
 800063e:	4770      	bx	lr
 8000640:	f092 0f00 	teq	r2, #0
 8000644:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000648:	bf06      	itte	eq
 800064a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800064e:	3201      	addeq	r2, #1
 8000650:	3b01      	subne	r3, #1
 8000652:	e7b5      	b.n	80005c0 <__addsf3+0x58>
 8000654:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	bf18      	it	ne
 800065e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000662:	d021      	beq.n	80006a8 <__addsf3+0x140>
 8000664:	ea92 0f03 	teq	r2, r3
 8000668:	d004      	beq.n	8000674 <__addsf3+0x10c>
 800066a:	f092 0f00 	teq	r2, #0
 800066e:	bf08      	it	eq
 8000670:	4608      	moveq	r0, r1
 8000672:	4770      	bx	lr
 8000674:	ea90 0f01 	teq	r0, r1
 8000678:	bf1c      	itt	ne
 800067a:	2000      	movne	r0, #0
 800067c:	4770      	bxne	lr
 800067e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000682:	d104      	bne.n	800068e <__addsf3+0x126>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	bf28      	it	cs
 8000688:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800068c:	4770      	bx	lr
 800068e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000692:	bf3c      	itt	cc
 8000694:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000698:	4770      	bxcc	lr
 800069a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800069e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	4770      	bx	lr
 80006a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006ac:	bf16      	itet	ne
 80006ae:	4608      	movne	r0, r1
 80006b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006b4:	4601      	movne	r1, r0
 80006b6:	0242      	lsls	r2, r0, #9
 80006b8:	bf06      	itte	eq
 80006ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006be:	ea90 0f01 	teqeq	r0, r1
 80006c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006c6:	4770      	bx	lr

080006c8 <__aeabi_ui2f>:
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e004      	b.n	80006d8 <__aeabi_i2f+0x8>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2f>:
 80006d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006d4:	bf48      	it	mi
 80006d6:	4240      	negmi	r0, r0
 80006d8:	ea5f 0c00 	movs.w	ip, r0
 80006dc:	bf08      	it	eq
 80006de:	4770      	bxeq	lr
 80006e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006e4:	4601      	mov	r1, r0
 80006e6:	f04f 0000 	mov.w	r0, #0
 80006ea:	e01c      	b.n	8000726 <__aeabi_l2f+0x2a>

080006ec <__aeabi_ul2f>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	e00a      	b.n	8000710 <__aeabi_l2f+0x14>
 80006fa:	bf00      	nop

080006fc <__aeabi_l2f>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000708:	d502      	bpl.n	8000710 <__aeabi_l2f+0x14>
 800070a:	4240      	negs	r0, r0
 800070c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000710:	ea5f 0c01 	movs.w	ip, r1
 8000714:	bf02      	ittt	eq
 8000716:	4684      	moveq	ip, r0
 8000718:	4601      	moveq	r1, r0
 800071a:	2000      	moveq	r0, #0
 800071c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000720:	bf08      	it	eq
 8000722:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000726:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800072a:	fabc f28c 	clz	r2, ip
 800072e:	3a08      	subs	r2, #8
 8000730:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000734:	db10      	blt.n	8000758 <__aeabi_l2f+0x5c>
 8000736:	fa01 fc02 	lsl.w	ip, r1, r2
 800073a:	4463      	add	r3, ip
 800073c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000740:	f1c2 0220 	rsb	r2, r2, #32
 8000744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000748:	fa20 f202 	lsr.w	r2, r0, r2
 800074c:	eb43 0002 	adc.w	r0, r3, r2
 8000750:	bf08      	it	eq
 8000752:	f020 0001 	biceq.w	r0, r0, #1
 8000756:	4770      	bx	lr
 8000758:	f102 0220 	add.w	r2, r2, #32
 800075c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000760:	f1c2 0220 	rsb	r2, r2, #32
 8000764:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000768:	fa21 f202 	lsr.w	r2, r1, r2
 800076c:	eb43 0002 	adc.w	r0, r3, r2
 8000770:	bf08      	it	eq
 8000772:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000776:	4770      	bx	lr

08000778 <__aeabi_fmul>:
 8000778:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800077c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000780:	bf1e      	ittt	ne
 8000782:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000786:	ea92 0f0c 	teqne	r2, ip
 800078a:	ea93 0f0c 	teqne	r3, ip
 800078e:	d06f      	beq.n	8000870 <__aeabi_fmul+0xf8>
 8000790:	441a      	add	r2, r3
 8000792:	ea80 0c01 	eor.w	ip, r0, r1
 8000796:	0240      	lsls	r0, r0, #9
 8000798:	bf18      	it	ne
 800079a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800079e:	d01e      	beq.n	80007de <__aeabi_fmul+0x66>
 80007a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007ac:	fba0 3101 	umull	r3, r1, r0, r1
 80007b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b8:	bf3e      	ittt	cc
 80007ba:	0049      	lslcc	r1, r1, #1
 80007bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007c0:	005b      	lslcc	r3, r3, #1
 80007c2:	ea40 0001 	orr.w	r0, r0, r1
 80007c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007ca:	2afd      	cmp	r2, #253	; 0xfd
 80007cc:	d81d      	bhi.n	800080a <__aeabi_fmul+0x92>
 80007ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007d6:	bf08      	it	eq
 80007d8:	f020 0001 	biceq.w	r0, r0, #1
 80007dc:	4770      	bx	lr
 80007de:	f090 0f00 	teq	r0, #0
 80007e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007e6:	bf08      	it	eq
 80007e8:	0249      	lsleq	r1, r1, #9
 80007ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007f2:	3a7f      	subs	r2, #127	; 0x7f
 80007f4:	bfc2      	ittt	gt
 80007f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007fe:	4770      	bxgt	lr
 8000800:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	3a01      	subs	r2, #1
 800080a:	dc5d      	bgt.n	80008c8 <__aeabi_fmul+0x150>
 800080c:	f112 0f19 	cmn.w	r2, #25
 8000810:	bfdc      	itt	le
 8000812:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000816:	4770      	bxle	lr
 8000818:	f1c2 0200 	rsb	r2, r2, #0
 800081c:	0041      	lsls	r1, r0, #1
 800081e:	fa21 f102 	lsr.w	r1, r1, r2
 8000822:	f1c2 0220 	rsb	r2, r2, #32
 8000826:	fa00 fc02 	lsl.w	ip, r0, r2
 800082a:	ea5f 0031 	movs.w	r0, r1, rrx
 800082e:	f140 0000 	adc.w	r0, r0, #0
 8000832:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000836:	bf08      	it	eq
 8000838:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800083c:	4770      	bx	lr
 800083e:	f092 0f00 	teq	r2, #0
 8000842:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000846:	bf02      	ittt	eq
 8000848:	0040      	lsleq	r0, r0, #1
 800084a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800084e:	3a01      	subeq	r2, #1
 8000850:	d0f9      	beq.n	8000846 <__aeabi_fmul+0xce>
 8000852:	ea40 000c 	orr.w	r0, r0, ip
 8000856:	f093 0f00 	teq	r3, #0
 800085a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800085e:	bf02      	ittt	eq
 8000860:	0049      	lsleq	r1, r1, #1
 8000862:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000866:	3b01      	subeq	r3, #1
 8000868:	d0f9      	beq.n	800085e <__aeabi_fmul+0xe6>
 800086a:	ea41 010c 	orr.w	r1, r1, ip
 800086e:	e78f      	b.n	8000790 <__aeabi_fmul+0x18>
 8000870:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000874:	ea92 0f0c 	teq	r2, ip
 8000878:	bf18      	it	ne
 800087a:	ea93 0f0c 	teqne	r3, ip
 800087e:	d00a      	beq.n	8000896 <__aeabi_fmul+0x11e>
 8000880:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000884:	bf18      	it	ne
 8000886:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800088a:	d1d8      	bne.n	800083e <__aeabi_fmul+0xc6>
 800088c:	ea80 0001 	eor.w	r0, r0, r1
 8000890:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000894:	4770      	bx	lr
 8000896:	f090 0f00 	teq	r0, #0
 800089a:	bf17      	itett	ne
 800089c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008a0:	4608      	moveq	r0, r1
 80008a2:	f091 0f00 	teqne	r1, #0
 80008a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008aa:	d014      	beq.n	80008d6 <__aeabi_fmul+0x15e>
 80008ac:	ea92 0f0c 	teq	r2, ip
 80008b0:	d101      	bne.n	80008b6 <__aeabi_fmul+0x13e>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d10f      	bne.n	80008d6 <__aeabi_fmul+0x15e>
 80008b6:	ea93 0f0c 	teq	r3, ip
 80008ba:	d103      	bne.n	80008c4 <__aeabi_fmul+0x14c>
 80008bc:	024b      	lsls	r3, r1, #9
 80008be:	bf18      	it	ne
 80008c0:	4608      	movne	r0, r1
 80008c2:	d108      	bne.n	80008d6 <__aeabi_fmul+0x15e>
 80008c4:	ea80 0001 	eor.w	r0, r0, r1
 80008c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d4:	4770      	bx	lr
 80008d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008de:	4770      	bx	lr

080008e0 <__aeabi_fdiv>:
 80008e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e8:	bf1e      	ittt	ne
 80008ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008ee:	ea92 0f0c 	teqne	r2, ip
 80008f2:	ea93 0f0c 	teqne	r3, ip
 80008f6:	d069      	beq.n	80009cc <__aeabi_fdiv+0xec>
 80008f8:	eba2 0203 	sub.w	r2, r2, r3
 80008fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000900:	0249      	lsls	r1, r1, #9
 8000902:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000906:	d037      	beq.n	8000978 <__aeabi_fdiv+0x98>
 8000908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800090c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000910:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000914:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000918:	428b      	cmp	r3, r1
 800091a:	bf38      	it	cc
 800091c:	005b      	lslcc	r3, r3, #1
 800091e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000922:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000926:	428b      	cmp	r3, r1
 8000928:	bf24      	itt	cs
 800092a:	1a5b      	subcs	r3, r3, r1
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000934:	bf24      	itt	cs
 8000936:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800093a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000942:	bf24      	itt	cs
 8000944:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800094c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000950:	bf24      	itt	cs
 8000952:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000956:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095a:	011b      	lsls	r3, r3, #4
 800095c:	bf18      	it	ne
 800095e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000962:	d1e0      	bne.n	8000926 <__aeabi_fdiv+0x46>
 8000964:	2afd      	cmp	r2, #253	; 0xfd
 8000966:	f63f af50 	bhi.w	800080a <__aeabi_fmul+0x92>
 800096a:	428b      	cmp	r3, r1
 800096c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000970:	bf08      	it	eq
 8000972:	f020 0001 	biceq.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800097c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000980:	327f      	adds	r2, #127	; 0x7f
 8000982:	bfc2      	ittt	gt
 8000984:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000988:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800098c:	4770      	bxgt	lr
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	3a01      	subs	r2, #1
 8000998:	e737      	b.n	800080a <__aeabi_fmul+0x92>
 800099a:	f092 0f00 	teq	r2, #0
 800099e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009a2:	bf02      	ittt	eq
 80009a4:	0040      	lsleq	r0, r0, #1
 80009a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009aa:	3a01      	subeq	r2, #1
 80009ac:	d0f9      	beq.n	80009a2 <__aeabi_fdiv+0xc2>
 80009ae:	ea40 000c 	orr.w	r0, r0, ip
 80009b2:	f093 0f00 	teq	r3, #0
 80009b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ba:	bf02      	ittt	eq
 80009bc:	0049      	lsleq	r1, r1, #1
 80009be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009c2:	3b01      	subeq	r3, #1
 80009c4:	d0f9      	beq.n	80009ba <__aeabi_fdiv+0xda>
 80009c6:	ea41 010c 	orr.w	r1, r1, ip
 80009ca:	e795      	b.n	80008f8 <__aeabi_fdiv+0x18>
 80009cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d0:	ea92 0f0c 	teq	r2, ip
 80009d4:	d108      	bne.n	80009e8 <__aeabi_fdiv+0x108>
 80009d6:	0242      	lsls	r2, r0, #9
 80009d8:	f47f af7d 	bne.w	80008d6 <__aeabi_fmul+0x15e>
 80009dc:	ea93 0f0c 	teq	r3, ip
 80009e0:	f47f af70 	bne.w	80008c4 <__aeabi_fmul+0x14c>
 80009e4:	4608      	mov	r0, r1
 80009e6:	e776      	b.n	80008d6 <__aeabi_fmul+0x15e>
 80009e8:	ea93 0f0c 	teq	r3, ip
 80009ec:	d104      	bne.n	80009f8 <__aeabi_fdiv+0x118>
 80009ee:	024b      	lsls	r3, r1, #9
 80009f0:	f43f af4c 	beq.w	800088c <__aeabi_fmul+0x114>
 80009f4:	4608      	mov	r0, r1
 80009f6:	e76e      	b.n	80008d6 <__aeabi_fmul+0x15e>
 80009f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009fc:	bf18      	it	ne
 80009fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a02:	d1ca      	bne.n	800099a <__aeabi_fdiv+0xba>
 8000a04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a08:	f47f af5c 	bne.w	80008c4 <__aeabi_fmul+0x14c>
 8000a0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a10:	f47f af3c 	bne.w	800088c <__aeabi_fmul+0x114>
 8000a14:	e75f      	b.n	80008d6 <__aeabi_fmul+0x15e>
 8000a16:	bf00      	nop

08000a18 <__aeabi_f2uiz>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	d20e      	bcs.n	8000a3a <__aeabi_f2uiz+0x22>
 8000a1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a20:	d30b      	bcc.n	8000a3a <__aeabi_f2uiz+0x22>
 8000a22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a2a:	d409      	bmi.n	8000a40 <__aeabi_f2uiz+0x28>
 8000a2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a34:	fa23 f002 	lsr.w	r0, r3, r2
 8000a38:	4770      	bx	lr
 8000a3a:	f04f 0000 	mov.w	r0, #0
 8000a3e:	4770      	bx	lr
 8000a40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a44:	d101      	bne.n	8000a4a <__aeabi_f2uiz+0x32>
 8000a46:	0242      	lsls	r2, r0, #9
 8000a48:	d102      	bne.n	8000a50 <__aeabi_f2uiz+0x38>
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <MGPIO_voidSetPinDirection>:
#include "DIO_config.h"



void MGPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	460b      	mov	r3, r1
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d03a      	beq.n	8000ae6 <MGPIO_voidSetPinDirection+0x8e>
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d06d      	beq.n	8000b50 <MGPIO_voidSetPinDirection+0xf8>
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d000      	beq.n	8000a7a <MGPIO_voidSetPinDirection+0x22>
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
			}
			break;
			
		default : 		break;
 8000a78:	e0a4      	b.n	8000bc4 <MGPIO_voidSetPinDirection+0x16c>
			if (Copy_u8Pin <= 7)
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	d815      	bhi.n	8000aac <MGPIO_voidSetPinDirection+0x54>
				GPIOA->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000a80:	4953      	ldr	r1, [pc, #332]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000a82:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	fa00 f202 	lsl.w	r2, r0, r2
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	4013      	ands	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000a96:	484e      	ldr	r0, [pc, #312]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	7979      	ldrb	r1, [r7, #5]
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	6003      	str	r3, [r0, #0]
			break;
 8000aaa:	e086      	b.n	8000bba <MGPIO_voidSetPinDirection+0x162>
			else if (Copy_u8Pin <= 15)
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	f200 8083 	bhi.w	8000bba <MGPIO_voidSetPinDirection+0x162>
				Copy_u8Pin -= 8;
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	3b08      	subs	r3, #8
 8000ab8:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000aba:	4945      	ldr	r1, [pc, #276]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	79ba      	ldrb	r2, [r7, #6]
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	200f      	movs	r0, #15
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	4013      	ands	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000ad0:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <MGPIO_voidSetPinDirection+0x178>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	7979      	ldrb	r1, [r7, #5]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	6043      	str	r3, [r0, #4]
			break;
 8000ae4:	e069      	b.n	8000bba <MGPIO_voidSetPinDirection+0x162>
			if (Copy_u8Pin <= 7)
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	d815      	bhi.n	8000b18 <MGPIO_voidSetPinDirection+0xc0>
				GPIOB->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000aec:	4939      	ldr	r1, [pc, #228]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	200f      	movs	r0, #15
 8000af8:	fa00 f202 	lsl.w	r2, r0, r2
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000b02:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	7979      	ldrb	r1, [r7, #5]
 8000b0a:	79ba      	ldrb	r2, [r7, #6]
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b12:	4313      	orrs	r3, r2
 8000b14:	6003      	str	r3, [r0, #0]
			break;
 8000b16:	e052      	b.n	8000bbe <MGPIO_voidSetPinDirection+0x166>
			else if (Copy_u8Pin <= 15)
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d84f      	bhi.n	8000bbe <MGPIO_voidSetPinDirection+0x166>
				Copy_u8Pin -= 8;
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	3b08      	subs	r3, #8
 8000b22:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000b24:	492b      	ldr	r1, [pc, #172]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	79ba      	ldrb	r2, [r7, #6]
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	200f      	movs	r0, #15
 8000b30:	fa00 f202 	lsl.w	r2, r0, r2
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	4013      	ands	r3, r2
 8000b38:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000b3a:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <MGPIO_voidSetPinDirection+0x17c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	7979      	ldrb	r1, [r7, #5]
 8000b42:	79ba      	ldrb	r2, [r7, #6]
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	6043      	str	r3, [r0, #4]
			break;
 8000b4e:	e036      	b.n	8000bbe <MGPIO_voidSetPinDirection+0x166>
			if (Copy_u8Pin <= 7)
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d815      	bhi.n	8000b82 <MGPIO_voidSetPinDirection+0x12a>
				GPIOC->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000b56:	4920      	ldr	r1, [pc, #128]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	200f      	movs	r0, #15
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	43d2      	mvns	r2, r2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	7979      	ldrb	r1, [r7, #5]
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	6003      	str	r3, [r0, #0]
			break;
 8000b80:	e01f      	b.n	8000bc2 <MGPIO_voidSetPinDirection+0x16a>
			else if (Copy_u8Pin <= 15)
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d81c      	bhi.n	8000bc2 <MGPIO_voidSetPinDirection+0x16a>
				Copy_u8Pin -= 8;
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	3b08      	subs	r3, #8
 8000b8c:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000b8e:	4912      	ldr	r1, [pc, #72]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	79ba      	ldrb	r2, [r7, #6]
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	200f      	movs	r0, #15
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	43d2      	mvns	r2, r2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MGPIO_voidSetPinDirection+0x180>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	7979      	ldrb	r1, [r7, #5]
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6043      	str	r3, [r0, #4]
			break;
 8000bb8:	e003      	b.n	8000bc2 <MGPIO_voidSetPinDirection+0x16a>
			break;
 8000bba:	bf00      	nop
 8000bbc:	e002      	b.n	8000bc4 <MGPIO_voidSetPinDirection+0x16c>
			break;
 8000bbe:	bf00      	nop
 8000bc0:	e000      	b.n	8000bc4 <MGPIO_voidSetPinDirection+0x16c>
			break;
 8000bc2:	bf00      	nop
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000

08000bdc <Flashing>:
extern u8 RecData[15000] ;
extern void Parser_voidParseRecord(u8* Copy_u8BufData) ;
extern u8 AsciToHex(u8 Copy_u8Asci) ;

void Flashing(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	FPEC_voidEraseAppArea(9);
 8000be2:	2009      	movs	r0, #9
 8000be4:	f000 fa34 	bl	8001050 <FPEC_voidEraseAppArea>
	/* Write 0 to EEPROM */
	MI2C1_voidRequestMemoryWrite(EEPROM_Address , Byte_Adress , 0) ;
 8000be8:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <Flashing+0x164>)
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <Flashing+0x168>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 fbba 	bl	800136c <MI2C1_voidRequestMemoryWrite>
	//MSTK_voidSetBusyWait(10000);
	//var = MI2C1_voidRequestMemoryRead(EEPROM_Address , Byte_Adress) ;
	/* Clear flag */
	CRC_error_Flag = 0 ;
 8000bf8:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <Flashing+0x16c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	//volatile u32 Data = *(u32*)(0x08002404) ;

	u16 Local_u8DataCount = 28 ;
 8000bfe:	231c      	movs	r3, #28
 8000c00:	80fb      	strh	r3, [r7, #6]
	u16 Local_u8RecordCount = 0 ;
 8000c02:	2300      	movs	r3, #0
 8000c04:	80bb      	strh	r3, [r7, #4]
	static u8 RecordArr[100] ;
	volatile u16 recordnum = 0 ;
 8000c06:	2300      	movs	r3, #0
 8000c08:	807b      	strh	r3, [r7, #2]
	while( (RecData[Local_u8DataCount] !='C') ||  (RecData[Local_u8DataCount + 1] !='L') )
 8000c0a:	e079      	b.n	8000d00 <Flashing+0x124>
	{
		if( (RecData[Local_u8DataCount] == '\r') && (RecData[Local_u8DataCount + 1] == '\n') && (RecData[Local_u8DataCount + 2] == '+') )
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4a4f      	ldr	r2, [pc, #316]	; (8000d4c <Flashing+0x170>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	2b0d      	cmp	r3, #13
 8000c14:	d118      	bne.n	8000c48 <Flashing+0x6c>
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <Flashing+0x170>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	2b0a      	cmp	r3, #10
 8000c20:	d112      	bne.n	8000c48 <Flashing+0x6c>
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	3302      	adds	r3, #2
 8000c26:	4a49      	ldr	r2, [pc, #292]	; (8000d4c <Flashing+0x170>)
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8000c2c:	d10c      	bne.n	8000c48 <Flashing+0x6c>
		{
			while(RecData[Local_u8DataCount] != ':' )
 8000c2e:	e002      	b.n	8000c36 <Flashing+0x5a>
			{
				Local_u8DataCount++ ;
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	3301      	adds	r3, #1
 8000c34:	80fb      	strh	r3, [r7, #6]
			while(RecData[Local_u8DataCount] != ':' )
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <Flashing+0x170>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	2b3a      	cmp	r3, #58	; 0x3a
 8000c3e:	d1f7      	bne.n	8000c30 <Flashing+0x54>
			}
			Local_u8DataCount++ ;
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	3301      	adds	r3, #1
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	e05b      	b.n	8000d00 <Flashing+0x124>
		}

		else if( (RecData[Local_u8DataCount] == '\r') && (RecData[Local_u8DataCount + 1] == '\n') && (RecData[Local_u8DataCount + 2] != '+') )
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <Flashing+0x170>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	2b0d      	cmp	r3, #13
 8000c50:	d119      	bne.n	8000c86 <Flashing+0xaa>
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	3301      	adds	r3, #1
 8000c56:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <Flashing+0x170>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d113      	bne.n	8000c86 <Flashing+0xaa>
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	3302      	adds	r3, #2
 8000c62:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <Flashing+0x170>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	2b2b      	cmp	r3, #43	; 0x2b
 8000c68:	d00d      	beq.n	8000c86 <Flashing+0xaa>
		{
			recordnum++ ;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	807b      	strh	r3, [r7, #2]
			Local_u8DataCount += 2 ;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	3302      	adds	r3, #2
 8000c78:	80fb      	strh	r3, [r7, #6]
			Local_u8RecordCount = 0 ;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	80bb      	strh	r3, [r7, #4]
			Parser_voidParseRecord(RecordArr) ;
 8000c7e:	4834      	ldr	r0, [pc, #208]	; (8000d50 <Flashing+0x174>)
 8000c80:	f000 fde3 	bl	800184a <Parser_voidParseRecord>
 8000c84:	e03c      	b.n	8000d00 <Flashing+0x124>
		}

		else if( (RecData[Local_u8DataCount] == '\r') && (RecData[Local_u8DataCount + 1] == '\r') && (RecData[Local_u8DataCount + 2] == '\n') && (RecData[Local_u8DataCount + 3] == '+') )
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <Flashing+0x170>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	2b0d      	cmp	r3, #13
 8000c8e:	d12b      	bne.n	8000ce8 <Flashing+0x10c>
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <Flashing+0x170>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	2b0d      	cmp	r3, #13
 8000c9a:	d125      	bne.n	8000ce8 <Flashing+0x10c>
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <Flashing+0x170>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	d11f      	bne.n	8000ce8 <Flashing+0x10c>
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	3303      	adds	r3, #3
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <Flashing+0x170>)
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	2b2b      	cmp	r3, #43	; 0x2b
 8000cb2:	d119      	bne.n	8000ce8 <Flashing+0x10c>
		{

			recordnum++ ;
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	807b      	strh	r3, [r7, #2]
			Local_u8DataCount += 2 ;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	80fb      	strh	r3, [r7, #6]
			Local_u8RecordCount = 0 ;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	80bb      	strh	r3, [r7, #4]
			Parser_voidParseRecord(RecordArr) ;
 8000cc8:	4821      	ldr	r0, [pc, #132]	; (8000d50 <Flashing+0x174>)
 8000cca:	f000 fdbe 	bl	800184a <Parser_voidParseRecord>
			while(RecData[Local_u8DataCount] != ':' )
 8000cce:	e002      	b.n	8000cd6 <Flashing+0xfa>
			{
				Local_u8DataCount++ ;
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	80fb      	strh	r3, [r7, #6]
			while(RecData[Local_u8DataCount] != ':' )
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <Flashing+0x170>)
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	2b3a      	cmp	r3, #58	; 0x3a
 8000cde:	d1f7      	bne.n	8000cd0 <Flashing+0xf4>
			}
			Local_u8DataCount += 2 ;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	e00b      	b.n	8000d00 <Flashing+0x124>
		}

		else
		{
			RecordArr[Local_u8RecordCount] = RecData[Local_u8DataCount] ;
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	88fa      	ldrh	r2, [r7, #6]
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <Flashing+0x170>)
 8000cee:	5c89      	ldrb	r1, [r1, r2]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <Flashing+0x174>)
 8000cf2:	54d1      	strb	r1, [r2, r3]
			Local_u8RecordCount ++ ;
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	80bb      	strh	r3, [r7, #4]
			Local_u8DataCount++ ;
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	80fb      	strh	r3, [r7, #6]
	while( (RecData[Local_u8DataCount] !='C') ||  (RecData[Local_u8DataCount + 1] !='L') )
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <Flashing+0x170>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	2b43      	cmp	r3, #67	; 0x43
 8000d08:	d180      	bne.n	8000c0c <Flashing+0x30>
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <Flashing+0x170>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	2b4c      	cmp	r3, #76	; 0x4c
 8000d14:	f47f af7a 	bne.w	8000c0c <Flashing+0x30>
		}
	}

	//Data = *(u32*)(0x08002404) ;
	if(CRC_error_Flag == 1)
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <Flashing+0x16c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <Flashing+0x14c>
	{
		FPEC_voidEraseAppArea(9) ;
 8000d22:	2009      	movs	r0, #9
 8000d24:	f000 f994 	bl	8001050 <FPEC_voidEraseAppArea>
	}
	/* Write 1 to EEPROM */
	MI2C1_voidRequestMemoryWrite(EEPROM_Address , Byte_Adress , 1) ;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <Flashing+0x164>)
 8000d2a:	7818      	ldrb	r0, [r3, #0]
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <Flashing+0x168>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	f000 fb1a 	bl	800136c <MI2C1_voidRequestMemoryWrite>
	//MSTK_voidSetBusyWait(10000);
	//var = MI2C1_voidRequestMemoryRead(EEPROM_Address , Byte_Adress) ;

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000010 	.word	0x20000010
 8000d44:	20000012 	.word	0x20000012
 8000d48:	2000015c 	.word	0x2000015c
 8000d4c:	20000170 	.word	0x20000170
 8000d50:	20000030 	.word	0x20000030

08000d54 <HESP_voidSendCommand>:

void HESP_voidSendCommand(u8 *Copy_pu8Command) 
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	u8 Local_u8Response = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	while(Local_u8Response == 0)
 8000d60:	e006      	b.n	8000d70 <HESP_voidSendCommand+0x1c>
	{
		MUSART1_voidTransmitSynch(Copy_pu8Command) ;
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fe6e 	bl	8001a44 <MUSART1_voidTransmitSynch>
		Local_u8Response = ValidateResponse() ;
 8000d68:	f000 f8f4 	bl	8000f54 <ValidateResponse>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
	while(Local_u8Response == 0)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f5      	beq.n	8000d62 <HESP_voidSendCommand+0xe>
	}
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HESP_voidInit>:


void HESP_voidInit(void) 
{
 8000d80:	b598      	push	{r3, r4, r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	/* Disable Echo */
	Time_Out = 10000 ;
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HESP_voidInit+0x30>)
 8000d86:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d8a:	f04f 0400 	mov.w	r4, #0
 8000d8e:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidSendCommand((u8*)"ATE0\r\n") ;
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <HESP_voidInit+0x34>)
 8000d94:	f7ff ffde 	bl	8000d54 <HESP_voidSendCommand>
	
	/* Set ESP To Station Mode */
	Time_Out = 10000 ;
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HESP_voidInit+0x30>)
 8000d9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d9e:	f04f 0400 	mov.w	r4, #0
 8000da2:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidSendCommand((u8*)"AT+CWMODE=1\r\n") ;
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <HESP_voidInit+0x38>)
 8000da8:	f7ff ffd4 	bl	8000d54 <HESP_voidSendCommand>
	/*HESP_voidSendCommand((u8*)"AT+CWJAP_CUR=\"Honor_8x\",\"01065121188Mohy#\"\r\n") ;
	HESP_voidSendCommand((u8*)"AT+CIPSTART=\"TCP\",\"162.253.155.226\",80\r\n") ;
	HESP_voidSendCommand((u8*)"AT+CIPSEND=40\r\n") ;
	MUSART1_voidTransmitSynch((u8*)"GET http://mohy.freevar.com/status.txt\r\n") ;*/
}
 8000dac:	bf00      	nop
 8000dae:	bd98      	pop	{r3, r4, r7, pc}
 8000db0:	20000008 	.word	0x20000008
 8000db4:	08001ff0 	.word	0x08001ff0
 8000db8:	08001ff8 	.word	0x08001ff8

08000dbc <HESP_u8GetFlag>:


u8 HESP_u8GetFlag(void)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
	u8 Local_u8Validation = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71bb      	strb	r3, [r7, #6]
	u8 Dummy = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	717b      	strb	r3, [r7, #5]
	volatile u8 Local_u8ReceivedFlag = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	713b      	strb	r3, [r7, #4]
	Time_Out = 50000 ;
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <HESP_u8GetFlag+0xa0>)
 8000dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000dd8:	f04f 0400 	mov.w	r4, #0
 8000ddc:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidServerConnect() ;
 8000de0:	f000 f8a6 	bl	8000f30 <HESP_voidServerConnect>
	HESP_voidSendCommand((u8*)"AT+CIPSEND=46\r\n") ;
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <HESP_u8GetFlag+0xa4>)
 8000de6:	f7ff ffb5 	bl	8000d54 <HESP_voidSendCommand>
	Time_Out = 200000 ;
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HESP_u8GetFlag+0xa0>)
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HESP_u8GetFlag+0xa8>)
 8000dee:	f04f 0400 	mov.w	r4, #0
 8000df2:	e882 0018 	stmia.w	r2, {r3, r4}
	while(Local_u8Validation == 0)
 8000df6:	e01d      	b.n	8000e34 <HESP_u8GetFlag+0x78>
	{
		MUSART1_voidTransmitSynch((u8*)"GET http://otawitharm.freevar.com/status.txt\r\n") ;
 8000df8:	481b      	ldr	r0, [pc, #108]	; (8000e68 <HESP_u8GetFlag+0xac>)
 8000dfa:	f000 fe23 	bl	8001a44 <MUSART1_voidTransmitSynch>
		Dummy = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	717b      	strb	r3, [r7, #5]
		while(Dummy !=255)
 8000e02:	e00a      	b.n	8000e1a <HESP_u8GetFlag+0x5e>
		{
			Dummy = MUSART1_u8ReceiveSynch() ;
 8000e04:	f000 fe44 	bl	8001a90 <MUSART1_u8ReceiveSynch>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	717b      	strb	r3, [r7, #5]
			RecData[Local_u8Index] = Dummy ;
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	4917      	ldr	r1, [pc, #92]	; (8000e6c <HESP_u8GetFlag+0xb0>)
 8000e10:	797a      	ldrb	r2, [r7, #5]
 8000e12:	54ca      	strb	r2, [r1, r3]
			Local_u8Index++ ;
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	3301      	adds	r3, #1
 8000e18:	71bb      	strb	r3, [r7, #6]
		while(Dummy !=255)
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d1f1      	bne.n	8000e04 <HESP_u8GetFlag+0x48>
		}

		if ( (RecData[24] == 'O') && (RecData[25] == 'K') )
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HESP_u8GetFlag+0xb0>)
 8000e22:	7e1b      	ldrb	r3, [r3, #24]
 8000e24:	2b4f      	cmp	r3, #79	; 0x4f
 8000e26:	d105      	bne.n	8000e34 <HESP_u8GetFlag+0x78>
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HESP_u8GetFlag+0xb0>)
 8000e2a:	7e5b      	ldrb	r3, [r3, #25]
 8000e2c:	2b4b      	cmp	r3, #75	; 0x4b
 8000e2e:	d101      	bne.n	8000e34 <HESP_u8GetFlag+0x78>
		{
			Local_u8Validation = 1 ;
 8000e30:	2301      	movs	r3, #1
 8000e32:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Validation == 0)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0de      	beq.n	8000df8 <HESP_u8GetFlag+0x3c>
		}
	}

	Local_u8ReceivedFlag = RecData[37] ;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HESP_u8GetFlag+0xb0>)
 8000e3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e40:	713b      	strb	r3, [r7, #4]
	Local_u8ReceivedFlag = AsciToHex(Local_u8ReceivedFlag);
 8000e42:	793b      	ldrb	r3, [r7, #4]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fb76 	bl	8001538 <AsciToHex>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	713b      	strb	r3, [r7, #4]

	return Local_u8ReceivedFlag ;
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	b2db      	uxtb	r3, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	08002008 	.word	0x08002008
 8000e64:	00030d40 	.word	0x00030d40
 8000e68:	08002018 	.word	0x08002018
 8000e6c:	20000170 	.word	0x20000170

08000e70 <HESP_u16GetHexFile>:

void HESP_u16GetHexFile(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
	u8 Local_u8Validation = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	71fb      	strb	r3, [r7, #7]
	u16 Local_u16Index = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	80bb      	strh	r3, [r7, #4]
	u8 Dummy = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	70fb      	strb	r3, [r7, #3]
	Time_Out = 50000 ;
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HESP_u16GetHexFile+0x84>)
 8000e84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000e88:	f04f 0400 	mov.w	r4, #0
 8000e8c:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidServerConnect() ;
 8000e90:	f000 f84e 	bl	8000f30 <HESP_voidServerConnect>
	HESP_voidSendCommand((u8*)"AT+CIPSEND=52\r\n") ;
 8000e94:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <HESP_u16GetHexFile+0x88>)
 8000e96:	f7ff ff5d 	bl	8000d54 <HESP_voidSendCommand>
	Time_Out = 1000000 ;
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HESP_u16GetHexFile+0x84>)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HESP_u16GetHexFile+0x8c>)
 8000e9e:	f04f 0400 	mov.w	r4, #0
 8000ea2:	e882 0018 	stmia.w	r2, {r3, r4}
	while(Local_u8Validation == 0)
 8000ea6:	e01d      	b.n	8000ee4 <HESP_u16GetHexFile+0x74>
	{
		MUSART1_voidTransmitSynch((u8*)"GET http://otawitharm.freevar.com/uploads/code.hex\r\n") ;
 8000ea8:	4815      	ldr	r0, [pc, #84]	; (8000f00 <HESP_u16GetHexFile+0x90>)
 8000eaa:	f000 fdcb 	bl	8001a44 <MUSART1_voidTransmitSynch>
		Dummy = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	70fb      	strb	r3, [r7, #3]
		while(Dummy !=255)
 8000eb2:	e00a      	b.n	8000eca <HESP_u16GetHexFile+0x5a>
		{
			Dummy = MUSART1_u8ReceiveSynch() ;
 8000eb4:	f000 fdec 	bl	8001a90 <MUSART1_u8ReceiveSynch>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	70fb      	strb	r3, [r7, #3]
			RecData[Local_u16Index] = Dummy ;
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	4911      	ldr	r1, [pc, #68]	; (8000f04 <HESP_u16GetHexFile+0x94>)
 8000ec0:	78fa      	ldrb	r2, [r7, #3]
 8000ec2:	54ca      	strb	r2, [r1, r3]
			Local_u16Index++ ;
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	80bb      	strh	r3, [r7, #4]
		while(Dummy !=255)
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d1f1      	bne.n	8000eb4 <HESP_u16GetHexFile+0x44>
		}
		
		if ( (RecData[24] == 'O') && (RecData[25] == 'K') )
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HESP_u16GetHexFile+0x94>)
 8000ed2:	7e1b      	ldrb	r3, [r3, #24]
 8000ed4:	2b4f      	cmp	r3, #79	; 0x4f
 8000ed6:	d105      	bne.n	8000ee4 <HESP_u16GetHexFile+0x74>
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HESP_u16GetHexFile+0x94>)
 8000eda:	7e5b      	ldrb	r3, [r3, #25]
 8000edc:	2b4b      	cmp	r3, #75	; 0x4b
 8000ede:	d101      	bne.n	8000ee4 <HESP_u16GetHexFile+0x74>
		{
			Local_u8Validation = 1 ;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Validation == 0)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0de      	beq.n	8000ea8 <HESP_u16GetHexFile+0x38>
		}
	}
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	08002048 	.word	0x08002048
 8000efc:	000f4240 	.word	0x000f4240
 8000f00:	08002058 	.word	0x08002058
 8000f04:	20000170 	.word	0x20000170

08000f08 <HESP_voidWiFiConnect>:


void HESP_voidWiFiConnect(void) 
{
 8000f08:	b598      	push	{r3, r4, r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	Time_Out = 1800000 ;
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HESP_voidWiFiConnect+0x1c>)
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HESP_voidWiFiConnect+0x20>)
 8000f10:	f04f 0400 	mov.w	r4, #0
 8000f14:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidSendCommand((u8*)"AT+CWJAP_CUR=\"Honor_8x\",\"01065121188Mohy#\"\r\n") ;
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <HESP_voidWiFiConnect+0x24>)
 8000f1a:	f7ff ff1b 	bl	8000d54 <HESP_voidSendCommand>
}
 8000f1e:	bf00      	nop
 8000f20:	bd98      	pop	{r3, r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	001b7740 	.word	0x001b7740
 8000f2c:	08002090 	.word	0x08002090

08000f30 <HESP_voidServerConnect>:


void HESP_voidServerConnect(void) 
{
 8000f30:	b598      	push	{r3, r4, r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	Time_Out = 10000 ;
 8000f34:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HESP_voidServerConnect+0x1c>)
 8000f36:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f3a:	f04f 0400 	mov.w	r4, #0
 8000f3e:	e882 0018 	stmia.w	r2, {r3, r4}
	HESP_voidSendCommand((u8*)"AT+CIPSTART=\"TCP\",\"162.253.155.226\",80\r\n") ;
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <HESP_voidServerConnect+0x20>)
 8000f44:	f7ff ff06 	bl	8000d54 <HESP_voidSendCommand>
}
 8000f48:	bf00      	nop
 8000f4a:	bd98      	pop	{r3, r4, r7, pc}
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	080020c0 	.word	0x080020c0

08000f54 <ValidateResponse>:


static u8 ValidateResponse(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09a      	sub	sp, #104	; 0x68
 8000f58:	af00      	add	r7, sp, #0
	volatile u8 ReceiveResponse [100] = {0} ;
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2264      	movs	r2, #100	; 0x64
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 ffeb 	bl	8001f3c <memset>
	u8 Local_u8Validation = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	u8 Local_u8Index = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	u8 Dummy = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Dummy !=255)
 8000f78:	e012      	b.n	8000fa0 <ValidateResponse+0x4c>
	{
		Dummy = MUSART1_u8ReceiveSynch() ;
 8000f7a:	f000 fd89 	bl	8001a90 <MUSART1_u8ReceiveSynch>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		ReceiveResponse[Local_u8Index] = Dummy ;
 8000f84:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000f88:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000f92:	f803 2c68 	strb.w	r2, [r3, #-104]
		Local_u8Index++ ;
 8000f96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	while(Dummy !=255)
 8000fa0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000fa4:	2bff      	cmp	r3, #255	; 0xff
 8000fa6:	d1e8      	bne.n	8000f7a <ValidateResponse+0x26>
	}
	
	if ( (ReceiveResponse[2] == 'O') && (ReceiveResponse[3] == 'K') )
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b4f      	cmp	r3, #79	; 0x4f
 8000fae:	d107      	bne.n	8000fc0 <ValidateResponse+0x6c>
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b4b      	cmp	r3, #75	; 0x4b
 8000fb6:	d103      	bne.n	8000fc0 <ValidateResponse+0x6c>
	{
		Local_u8Validation = 1 ;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fbe:	e041      	b.n	8001044 <ValidateResponse+0xf0>
	}

	else if ( (ReceiveResponse[9] == 'O') && (ReceiveResponse[10] == 'K') )
 8000fc0:	7a7b      	ldrb	r3, [r7, #9]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b4f      	cmp	r3, #79	; 0x4f
 8000fc6:	d107      	bne.n	8000fd8 <ValidateResponse+0x84>
 8000fc8:	7abb      	ldrb	r3, [r7, #10]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b4b      	cmp	r3, #75	; 0x4b
 8000fce:	d103      	bne.n	8000fd8 <ValidateResponse+0x84>
	{
		Local_u8Validation = 1 ;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000fd6:	e035      	b.n	8001044 <ValidateResponse+0xf0>
	}
	
	else if ( (ReceiveResponse[48] == 'O') && (ReceiveResponse[49] == 'K') )
 8000fd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b4f      	cmp	r3, #79	; 0x4f
 8000fe0:	d108      	bne.n	8000ff4 <ValidateResponse+0xa0>
 8000fe2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b4b      	cmp	r3, #75	; 0x4b
 8000fea:	d103      	bne.n	8000ff4 <ValidateResponse+0xa0>
	{
		Local_u8Validation = 1 ;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ff2:	e027      	b.n	8001044 <ValidateResponse+0xf0>
	}
	else if ( (ReceiveResponse[11] == 'O') && (ReceiveResponse[12] == 'K') )
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b4f      	cmp	r3, #79	; 0x4f
 8000ffa:	d107      	bne.n	800100c <ValidateResponse+0xb8>
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b4b      	cmp	r3, #75	; 0x4b
 8001002:	d103      	bne.n	800100c <ValidateResponse+0xb8>
	{
		Local_u8Validation = 1 ;
 8001004:	2301      	movs	r3, #1
 8001006:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800100a:	e01b      	b.n	8001044 <ValidateResponse+0xf0>
	}
	
	else if ( (ReceiveResponse[31] == 'O') && (ReceiveResponse[32] == 'K') )
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b4f      	cmp	r3, #79	; 0x4f
 8001012:	d108      	bne.n	8001026 <ValidateResponse+0xd2>
 8001014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b4b      	cmp	r3, #75	; 0x4b
 800101c:	d103      	bne.n	8001026 <ValidateResponse+0xd2>
	{
		Local_u8Validation = 1 ;
 800101e:	2301      	movs	r3, #1
 8001020:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001024:	e00e      	b.n	8001044 <ValidateResponse+0xf0>
	}

	else if ( (ReceiveResponse[8] == 'C') && (ReceiveResponse[14] == 'T') )
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b43      	cmp	r3, #67	; 0x43
 800102c:	d107      	bne.n	800103e <ValidateResponse+0xea>
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b54      	cmp	r3, #84	; 0x54
 8001034:	d103      	bne.n	800103e <ValidateResponse+0xea>
	{
			Local_u8Validation = 1 ;
 8001036:	2301      	movs	r3, #1
 8001038:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800103c:	e002      	b.n	8001044 <ValidateResponse+0xf0>
	}

	else 
	{
		Local_u8Validation = 0 ;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}
	return Local_u8Validation ;
 8001044:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001048:	4618      	mov	r0, r3
 800104a:	3768      	adds	r7, #104	; 0x68
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FPEC_voidEraseAppArea>:
#include"FPEC_private.h"
#include"FPEC_config.h"


void FPEC_voidEraseAppArea(u8 Copy_u8StartPage) 
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Index = Copy_u8StartPage ;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	73fb      	strb	r3, [r7, #15]
	for(Local_u8Index=Copy_u8StartPage ; Local_u8Index<64 ; Local_u8Index++)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e006      	b.n	8001072 <FPEC_voidEraseAppArea+0x22>
	{
		FPEC_voidFlashErasePage(Local_u8Index) ;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f80a 	bl	8001080 <FPEC_voidFlashErasePage>
	for(Local_u8Index=Copy_u8StartPage ; Local_u8Index<64 ; Local_u8Index++)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b3f      	cmp	r3, #63	; 0x3f
 8001076:	d9f5      	bls.n	8001064 <FPEC_voidEraseAppArea+0x14>
	}
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <FPEC_voidFlashErasePage>:


void FPEC_voidFlashErasePage(u8 Copy_u8PageNum) 
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	/* wait busy flag */
	while(GET_BIT(FPEC->SR , 0) == 1);
 800108a:	bf00      	nop
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d0f9      	beq.n	800108c <FPEC_voidFlashErasePage+0xc>
	
	/*Check if flash is locked or no */
	if( GET_BIT(FPEC->CR , 7) == 1) 
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	09db      	lsrs	r3, r3, #7
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d105      	bne.n	80010b2 <FPEC_voidFlashErasePage+0x32>
	{
		/*Unlock sequence */
		FPEC->KEYR = 0X45670123 ;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <FPEC_voidFlashErasePage+0x8c>)
 80010aa:	605a      	str	r2, [r3, #4]
		FPEC->KEYR = 0XCDEF89AB ;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <FPEC_voidFlashErasePage+0x90>)
 80010b0:	605a      	str	r2, [r3, #4]
	}
	
	/* Page erase operation */
	SET_BIT(FPEC->CR , 1);
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6113      	str	r3, [r2, #16]
	
	/* Set page addres to be erased */
	FPEC->AR = (u32)(Copy_u8PageNum * 1024) + 0X08000000;
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010c8:	6153      	str	r3, [r2, #20]
	
	/*Start Erase */
	SET_BIT(FPEC->CR , 6);
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d4:	6113      	str	r3, [r2, #16]
	
	/* wait busy flag */
	while(GET_BIT(FPEC->SR , 0) == 1);
 80010d6:	bf00      	nop
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d0f9      	beq.n	80010d8 <FPEC_voidFlashErasePage+0x58>
	
	/* End Off Operation */
	SET_BIT(FPEC->SR , 5);
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	60d3      	str	r3, [r2, #12]
	CLR_BIT(FPEC->CR , 1);
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <FPEC_voidFlashErasePage+0x88>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	6113      	str	r3, [r2, #16]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000
 800110c:	45670123 	.word	0x45670123
 8001110:	cdef89ab 	.word	0xcdef89ab

08001114 <FPEC_voidFlashWrite>:


void FPEC_voidFlashWrite(u32 Copy_u32Address , u16* Copy_pu16Data , u8 Copy_u8Length) 
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	71fb      	strb	r3, [r7, #7]
	u8 i = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
	volatile u16 Temp = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	82bb      	strh	r3, [r7, #20]
	//volatile u16 Var = 0 ;
	/* wait busy flag */
	while(GET_BIT(FPEC->SR , 0) == 1);
 800112a:	bf00      	nop
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d0f9      	beq.n	800112c <FPEC_voidFlashWrite+0x18>
	
	/*Check if flash is locked or no */
	if( GET_BIT(FPEC->CR , 7) == 1) 
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	09db      	lsrs	r3, r3, #7
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d105      	bne.n	8001152 <FPEC_voidFlashWrite+0x3e>
	{
		/*Unlock sequence */
		FPEC->KEYR = 0X45670123 ;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 8001148:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <FPEC_voidFlashWrite+0xb4>)
 800114a:	605a      	str	r2, [r3, #4]
		FPEC->KEYR = 0XCDEF89AB ;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <FPEC_voidFlashWrite+0xb8>)
 8001150:	605a      	str	r2, [r3, #4]
	}
	
	for (i=0 ; i<Copy_u8Length ; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	e02b      	b.n	80011b0 <FPEC_voidFlashWrite+0x9c>
	{
		/* flash write operation */
		SET_BIT(FPEC->CR , 0);
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6113      	str	r3, [r2, #16]
		
		/* Half word operation */
		
		Temp = Copy_pu16Data[i] ;
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	82bb      	strh	r3, [r7, #20]
		*((volatile u16*)Copy_u32Address)= Copy_pu16Data[i] ;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	7dfa      	ldrb	r2, [r7, #23]
 8001174:	0052      	lsls	r2, r2, #1
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	440a      	add	r2, r1
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	801a      	strh	r2, [r3, #0]
		//Var = *(u16*)(Copy_u32Address) ;
		Copy_u32Address += 2 ;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3302      	adds	r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
		
		/* wait busy flag */
		while(GET_BIT(FPEC->SR , 0) == 1);
 8001184:	bf00      	nop
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d0f9      	beq.n	8001186 <FPEC_voidFlashWrite+0x72>
		
		/* End Off Operation */
		SET_BIT(FPEC->SR , 5);
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->CR , 0);
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <FPEC_voidFlashWrite+0xb0>)
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6113      	str	r3, [r2, #16]
	for (i=0 ; i<Copy_u8Length ; i++)
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	3301      	adds	r3, #1
 80011ae:	75fb      	strb	r3, [r7, #23]
 80011b0:	7dfa      	ldrb	r2, [r7, #23]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3cf      	bcc.n	8001158 <FPEC_voidFlashWrite+0x44>
	}
	
}
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	45670123 	.word	0x45670123
 80011cc:	cdef89ab 	.word	0xcdef89ab

080011d0 <I2C_voidSendStartCond>:
#include "I2C_config.h"

#define UNUSED(X) (void)X      /* To avoid gcc/g++ warnings */

static void I2C_voidSendStartCond(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	/* send start condition */
	SET_BIT(I2C1_REG->CR1 , 8) ;
 80011d4:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <I2C_voidSendStartCond+0x28>)
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <I2C_voidSendStartCond+0x28>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
	/* wait till SB flag is set */
	while(GET_BIT(I2C1_REG->SR1 , 0) == 0) ;
 80011e0:	bf00      	nop
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <I2C_voidSendStartCond+0x28>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f9      	beq.n	80011e2 <I2C_voidSendStartCond+0x12>
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40005400 	.word	0x40005400

080011fc <I2C_voidSendStopCond>:

static void I2C_voidSendStopCond(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	/* send stop condition */
	SET_BIT(I2C1_REG->CR1 , 9) ;
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <I2C_voidSendStopCond+0x18>)
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <I2C_voidSendStopCond+0x18>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40005400 	.word	0x40005400

08001218 <I2C_voidSendSlaveAddress>:

static void I2C_voidSendSlaveAddress(u8 Copy_u8SlaveAddress)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	u16 Local_u16Temp = 0 ;
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
	I2C1_REG->DR = Copy_u8SlaveAddress ;
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <I2C_voidSendSlaveAddress+0x3c>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	6113      	str	r3, [r2, #16]
	/* wait till ADDR Flag is set */
	while(GET_BIT(I2C1_REG->SR1 , 1) == 0) ;
 800122c:	bf00      	nop
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <I2C_voidSendSlaveAddress+0x3c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	085b      	lsrs	r3, r3, #1
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f8      	beq.n	800122e <I2C_voidSendSlaveAddress+0x16>
	/* Clear ADDR flag */
	Local_u16Temp = I2C1_REG->SR1 ;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <I2C_voidSendSlaveAddress+0x3c>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	81fb      	strh	r3, [r7, #14]
	Local_u16Temp = I2C1_REG->SR2 ;
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <I2C_voidSendSlaveAddress+0x3c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	81fb      	strh	r3, [r7, #14]
	UNUSED(Local_u16Temp) ;
	/* wait till TXE Flag is set */
	//while(GET_BIT(I2C1_REG->SR1 , 7) == 0) ;
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400

08001258 <I2C_voidWriteData>:

static void I2C_voidWriteData(u8 Copy_u8Data)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	while(GET_BIT(I2C1_REG->SR1 , 7) == 0) ;
 8001262:	bf00      	nop
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <I2C_voidWriteData+0x3c>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	09db      	lsrs	r3, r3, #7
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f8      	beq.n	8001264 <I2C_voidWriteData+0xc>
	/* send data */
	I2C1_REG->DR = Copy_u8Data ;
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <I2C_voidWriteData+0x3c>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	6113      	str	r3, [r2, #16]
	/* wait till TXE Flag is set */
	while(GET_BIT(I2C1_REG->SR1 , 7) == 0) ;
 8001278:	bf00      	nop
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <I2C_voidWriteData+0x3c>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	09db      	lsrs	r3, r3, #7
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f8      	beq.n	800127a <I2C_voidWriteData+0x22>
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40005400 	.word	0x40005400

08001298 <I2C_u8ReadData>:

static u8 I2C_u8ReadData(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
	/* wait till data is received */
	while(GET_BIT(I2C1_REG->SR1 , 6) == 0) ;
 800129e:	bf00      	nop
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <I2C_u8ReadData+0x28>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f8      	beq.n	80012a0 <I2C_u8ReadData+0x8>
	/* read receive data */
	u8 Local_u8RecData = I2C1_REG->DR ;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <I2C_u8ReadData+0x28>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	71fb      	strb	r3, [r7, #7]
	
	return Local_u8RecData ;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40005400 	.word	0x40005400

080012c4 <MI2C1_voidInit>:



void MI2C1_voidInit(void) 
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0

	u16 CLK_Control = 0 ;
 80012ca:	2300      	movs	r3, #0
 80012cc:	80fb      	strh	r3, [r7, #6]

	I2C1_REG->CR1 = 0 ;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
	I2C1_REG->CR1 |= (1<<15);  // reset the I2C
 80012d4:	4a24      	ldr	r2, [pc, #144]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	6013      	str	r3, [r2, #0]
	I2C1_REG->CR1 &= ~(1<<15);  // Normal operation
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012ea:	6013      	str	r3, [r2, #0]
	I2C1_REG->CR1 |= ( (I2C_ACK << 10) | (I2C_NO_STRETCHING << 7 ) );
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f443 6390 	orr.w	r3, r3, #1152	; 0x480
 80012f6:	6013      	str	r3, [r2, #0]
	
	I2C1_REG->CR2 = 0 ;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MI2C1_voidInit+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
	I2C1_REG->CR2 |= ((u8)I2C_CLOCK) ;
 80012fe:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6053      	str	r3, [r2, #4]
	
	I2C1_REG->OAR1 = 0 ;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MI2C1_voidInit+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
	I2C1_REG->OAR1 |= ( (I2C_ADDRESSING_MODE << 15) | (1 << 14) | (I2C_NODE_ADDRESS << 1) ) ;
 8001310:	4a15      	ldr	r2, [pc, #84]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131a:	6093      	str	r3, [r2, #8]
	SET_BIT(I2C1_REG->OAR1 , 14) ;
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MI2C1_voidInit+0xa4>)
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6093      	str	r3, [r2, #8]
	
	I2C1_REG->OAR2 = 0 ;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MI2C1_voidInit+0xa4>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
	I2C1_REG->OAR2 |= (I2C_DUAL_ADDRESSING) ;
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60d3      	str	r3, [r2, #12]
	
	I2C1_REG->CCR = 0 ;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
	#if			I2C_MASTER_MODE == STANDARD_MODE
		CLK_Control = ( ( (u64)(I2C_CLOCK*1000000) )/( (u64)(2*I2C_SCL) ) ) ;
 800133c:	2328      	movs	r3, #40	; 0x28
 800133e:	80fb      	strh	r3, [r7, #6]
	#else
		#error("you entered non valid value")
	#endif

	
	I2C1_REG->CCR |= ( (I2C_MASTER_MODE << 15) | (I2C_FM_DUTY_MODE << 14) | (CLK_Control) ) ;
 8001340:	4909      	ldr	r1, [pc, #36]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4313      	orrs	r3, r2
 800134a:	61cb      	str	r3, [r1, #28]
	
	//I2C1_REG->TRISE = 0 ;
	I2C1_REG->TRISE = 9 ;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MI2C1_voidInit+0xa4>)
 800134e:	2209      	movs	r2, #9
 8001350:	621a      	str	r2, [r3, #32]
	
	/* I2C Enable */
	SET_BIT(I2C1_REG->CR1 , 0) ;
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <MI2C1_voidInit+0xa4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6013      	str	r3, [r2, #0]
	//I2C1_REG->CR1 |= (I2C_ACK << 10) ;
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40005400 	.word	0x40005400

0800136c <MI2C1_voidRequestMemoryWrite>:


void MI2C1_voidRequestMemoryWrite(u8 Copy_u8SlaveAddress, u16 Copy_u16ByteAddress , u8 Copy_u8Data) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	71bb      	strb	r3, [r7, #6]
	I2C1_REG->CR1 |= (I2C_ACK << 10) ;
 800137e:	4a30      	ldr	r2, [pc, #192]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001388:	6013      	str	r3, [r2, #0]
	/* Generate Start */
	I2C_voidSendStartCond();
 800138a:	f7ff ff21 	bl	80011d0 <I2C_voidSendStartCond>
	
	/* Send slave address + write */
	I2C_voidSendSlaveAddress((Copy_u8SlaveAddress<<1) | (WRITEMODE));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff3f 	bl	8001218 <I2C_voidSendSlaveAddress>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d107      	bne.n	80013b8 <MI2C1_voidRequestMemoryWrite+0x4c>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 80013a8:	f7ff ff28 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013b6:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Send MSB Word address */
	I2C_voidWriteData((u8)(Copy_u16ByteAddress >> 8));
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff49 	bl	8001258 <I2C_voidWriteData>

	/* Check ACK -- ACK Failed(AF) flag */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <MI2C1_voidRequestMemoryWrite+0x78>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 80013d4:	f7ff ff12 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e2:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Send LSB Word address */
	I2C_voidWriteData((u8)Copy_u16ByteAddress);
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff35 	bl	8001258 <I2C_voidWriteData>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	0a9b      	lsrs	r3, r3, #10
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <MI2C1_voidRequestMemoryWrite+0xa0>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 80013fc:	f7ff fefe 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800140a:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Send Data to be stored in the byte address */
	I2C_voidWriteData((u8)Copy_u8Data);
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff22 	bl	8001258 <I2C_voidWriteData>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	0a9b      	lsrs	r3, r3, #10
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <MI2C1_voidRequestMemoryWrite+0xc6>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 8001422:	f7ff feeb 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <MI2C1_voidRequestMemoryWrite+0xd4>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001430:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Generate Stop */
	I2C_voidSendStopCond();
 8001432:	f7ff fee3 	bl	80011fc <I2C_voidSendStopCond>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005400 	.word	0x40005400

08001444 <MI2C1_voidRequestMemoryRead>:



u8 MI2C1_voidRequestMemoryRead(u8 Copy_u8SlaveAddress , u16 Copy_u16ByteAddress) 
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	I2C1_REG->CR1 |= (I2C_ACK << 10) ;
 8001454:	4a37      	ldr	r2, [pc, #220]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
	u8 RXData = 0 ;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
	/* Generate Start */
	I2C_voidSendStartCond();
 8001464:	f7ff feb4 	bl	80011d0 <I2C_voidSendStartCond>
	
	/* Send slave address + write */
	I2C_voidSendSlaveAddress((Copy_u8SlaveAddress<<1) | (WRITEMODE));
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fed2 	bl	8001218 <I2C_voidSendSlaveAddress>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	0a9b      	lsrs	r3, r3, #10
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <MI2C1_voidRequestMemoryRead+0x4e>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 8001482:	f7ff febb 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 8001486:	4a2b      	ldr	r2, [pc, #172]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001490:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Send MSB Word address */
	I2C_voidWriteData((u8)(Copy_u16ByteAddress >> 8));
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fedc 	bl	8001258 <I2C_voidWriteData>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	0a9b      	lsrs	r3, r3, #10
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <MI2C1_voidRequestMemoryRead+0x7a>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 80014ae:	f7ff fea5 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014bc:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Send LSB Word address */
	I2C_voidWriteData((u8)Copy_u16ByteAddress);
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fec8 	bl	8001258 <I2C_voidWriteData>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	0a9b      	lsrs	r3, r3, #10
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <MI2C1_voidRequestMemoryRead+0xa2>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 80014d6:	f7ff fe91 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014e4:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	/* Generate repeated Start */
	I2C_voidSendStartCond();
 80014e6:	f7ff fe73 	bl	80011d0 <I2C_voidSendStartCond>
	
	/* Send slave address + read */
	I2C_voidSendSlaveAddress((Copy_u8SlaveAddress<<1) | (READMODE));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fe8d 	bl	8001218 <I2C_voidSendSlaveAddress>

	/* Check ACK */
	if (GET_BIT(I2C1_REG->SR1 , 10) == 1)
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <MI2C1_voidRequestMemoryRead+0xd8>
	{
		/* Generate Stop */
		I2C_voidSendStopCond();
 800150c:	f7ff fe76 	bl	80011fc <I2C_voidSendStopCond>
		/* Clear ACK Failed(AF) flag */
		CLR_BIT(I2C1_REG->SR1 , 10) ;
 8001510:	4a08      	ldr	r2, [pc, #32]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MI2C1_voidRequestMemoryRead+0xf0>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800151a:	6153      	str	r3, [r2, #20]
		//return error ;
	}
	
	//read received data 
	RXData=I2C_u8ReadData();
 800151c:	f7ff febc 	bl	8001298 <I2C_u8ReadData>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
	
	/* Generate Stop */
	I2C_voidSendStopCond();
 8001524:	f7ff fe6a 	bl	80011fc <I2C_voidSendStopCond>
	
	return RXData;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40005400 	.word	0x40005400

08001538 <AsciToHex>:
u16 Data[100] = {0};
u32 Address= 0x08000000;
volatile u8 CRC_error_Flag = 0 ;

u8 AsciToHex(u8 Copy_u8Asci)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	u8 Result;
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b2f      	cmp	r3, #47	; 0x2f
 8001546:	d906      	bls.n	8001556 <AsciToHex+0x1e>
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b39      	cmp	r3, #57	; 0x39
 800154c:	d803      	bhi.n	8001556 <AsciToHex+0x1e>
	{
		Result = Copy_u8Asci - 48;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3b30      	subs	r3, #48	; 0x30
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e002      	b.n	800155c <AsciToHex+0x24>
	}

	else
	{
		Result = Copy_u8Asci - 55;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3b37      	subs	r3, #55	; 0x37
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return Result;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <CRC_Check>:


void CRC_Check(u8 Copy_u8BufData[])
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b092      	sub	sp, #72	; 0x48
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	u8 DigitLow,DigitHigh,CharacterCount,ReceivedCRC;
	u16 Checksum = 0 ;
 8001570:	2300      	movs	r3, #0
 8001572:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	u8 RecordData[50] = {0} ;
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2232      	movs	r2, #50	; 0x32
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fcdc 	bl	8001f3c <memset>
	u8 DataCounter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	DigitHigh = AsciToHex(Copy_u8BufData[1]) ;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ffd1 	bl	8001538 <AsciToHex>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	DigitLow = AsciToHex(Copy_u8BufData[2]) ;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffc8 	bl	8001538 <AsciToHex>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CharacterCount = (DigitHigh << 4) | (DigitLow) ;
 80015ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	b25a      	sxtb	r2, r3
 80015b6:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	for (u16 i=1 ; i<=(CharacterCount + 5) ; i++)
 80015c2:	2301      	movs	r3, #1
 80015c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80015c8:	e033      	b.n	8001632 <CRC_Check+0xca>
	{
		DigitHigh = AsciToHex (Copy_u8BufData[2*i-1 ]) ;
 80015ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ffad 	bl	8001538 <AsciToHex>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		DigitLow = AsciToHex (Copy_u8BufData[2*i]) ;
 80015e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	461a      	mov	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffa0 	bl	8001538 <AsciToHex>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		RecordData[DataCounter] = (DigitHigh << 4) | (DigitLow) ;
 80015fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001602:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b251      	sxtb	r1, r2
 800160a:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 800160e:	430a      	orrs	r2, r1
 8001610:	b252      	sxtb	r2, r2
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001618:	440b      	add	r3, r1
 800161a:	f803 2c40 	strb.w	r2, [r3, #-64]
		DataCounter++;
 800161e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001622:	3301      	adds	r3, #1
 8001624:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	for (u16 i=1 ; i<=(CharacterCount + 5) ; i++)
 8001628:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800162c:	3301      	adds	r3, #1
 800162e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001632:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001636:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800163a:	3305      	adds	r3, #5
 800163c:	429a      	cmp	r2, r3
 800163e:	ddc4      	ble.n	80015ca <CRC_Check+0x62>
	}

	ReceivedCRC = RecordData[CharacterCount + 4] ;
 8001640:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001644:	3304      	adds	r3, #4
 8001646:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800164a:	4413      	add	r3, r2
 800164c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001650:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Checksum = RecordData[0] ;
 8001654:	7a3b      	ldrb	r3, [r7, #8]
 8001656:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	for(u16 i = 1 ; i<(CharacterCount + 4) ; i++)
 800165a:	2301      	movs	r3, #1
 800165c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001660:	e011      	b.n	8001686 <CRC_Check+0x11e>
	{
		Checksum += RecordData[i] ;
 8001662:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001666:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800166a:	4413      	add	r3, r2
 800166c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001670:	b29a      	uxth	r2, r3
 8001672:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001676:	4413      	add	r3, r2
 8001678:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for(u16 i = 1 ; i<(CharacterCount + 4) ; i++)
 800167c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001680:	3301      	adds	r3, #1
 8001682:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001686:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800168a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800168e:	3304      	adds	r3, #4
 8001690:	429a      	cmp	r2, r3
 8001692:	dbe6      	blt.n	8001662 <CRC_Check+0xfa>
	}

	/* 2's Complement */
	Checksum = (u8)((~ Checksum) + 1) ;
 8001694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001698:	b2db      	uxtb	r3, r3
 800169a:	425b      	negs	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	if((u8)Checksum != ReceivedCRC)
 80016a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d002      	beq.n	80016b6 <CRC_Check+0x14e>
	{
		CRC_error_Flag = 1 ;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <CRC_Check+0x158>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
	}
}
 80016b6:	bf00      	nop
 80016b8:	3748      	adds	r7, #72	; 0x48
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000015c 	.word	0x2000015c

080016c4 <ParseData>:


void ParseData(u8* Copy_u8BufData)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	u8 DigitLow,DigitHigh,CC,i;
	u8 DataDigit0,DataDigit1,DataDigit2,DataDigit3;
	u8 DataCounter = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75bb      	strb	r3, [r7, #22]

	/* Hex record CRC check */
	CRC_Check(Copy_u8BufData) ;
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff49 	bl	8001568 <CRC_Check>

	/* Get Character Count */
	DigitHigh = AsciToHex (Copy_u8BufData[1]);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff2b 	bl	8001538 <AsciToHex>
 80016e2:	4603      	mov	r3, r0
 80016e4:	757b      	strb	r3, [r7, #21]
	DigitLow  = AsciToHex (Copy_u8BufData[2]);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3302      	adds	r3, #2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff23 	bl	8001538 <AsciToHex>
 80016f2:	4603      	mov	r3, r0
 80016f4:	753b      	strb	r3, [r7, #20]
	CC        = (DigitHigh<<4) | DigitLow ;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	b25a      	sxtb	r2, r3
 80016fc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	DataDigit0 = AsciToHex (Copy_u8BufData[3]);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff13 	bl	8001538 <AsciToHex>
 8001712:	4603      	mov	r3, r0
 8001714:	74bb      	strb	r3, [r7, #18]
	DataDigit1 = AsciToHex (Copy_u8BufData[4]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff0b 	bl	8001538 <AsciToHex>
 8001722:	4603      	mov	r3, r0
 8001724:	747b      	strb	r3, [r7, #17]
	DataDigit2 = AsciToHex (Copy_u8BufData[5]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3305      	adds	r3, #5
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff03 	bl	8001538 <AsciToHex>
 8001732:	4603      	mov	r3, r0
 8001734:	743b      	strb	r3, [r7, #16]
	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3306      	adds	r3, #6
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fefb 	bl	8001538 <AsciToHex>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	Address = Address & 0xFFFF0000;
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <ParseData+0x168>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <ParseData+0x168>)
 8001750:	6013      	str	r3, [r2, #0]
	Address = Address | (DataDigit3) | (DataDigit2 << 4) | (DataDigit1 << 8) | (DataDigit0<<12);
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <ParseData+0x168>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4313      	orrs	r3, r2
 800175a:	7c3a      	ldrb	r2, [r7, #16]
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	4313      	orrs	r3, r2
 8001760:	7c7a      	ldrb	r2, [r7, #17]
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	4313      	orrs	r3, r2
 8001766:	7cba      	ldrb	r2, [r7, #18]
 8001768:	0312      	lsls	r2, r2, #12
 800176a:	4313      	orrs	r3, r2
 800176c:	4a2f      	ldr	r2, [pc, #188]	; (800182c <ParseData+0x168>)
 800176e:	6013      	str	r3, [r2, #0]

	for (i=0;i<CC/2; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
 8001774:	e047      	b.n	8001806 <ParseData+0x142>
	{
		DataDigit0 = AsciToHex (Copy_u8BufData[4*i+9 ]);
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	3309      	adds	r3, #9
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fed8 	bl	8001538 <AsciToHex>
 8001788:	4603      	mov	r3, r0
 800178a:	74bb      	strb	r3, [r7, #18]
		DataDigit1 = AsciToHex (Copy_u8BufData[4*i+10]);
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	330a      	adds	r3, #10
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fecd 	bl	8001538 <AsciToHex>
 800179e:	4603      	mov	r3, r0
 80017a0:	747b      	strb	r3, [r7, #17]
		DataDigit2 = AsciToHex (Copy_u8BufData[4*i+11]);
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	330b      	adds	r3, #11
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fec2 	bl	8001538 <AsciToHex>
 80017b4:	4603      	mov	r3, r0
 80017b6:	743b      	strb	r3, [r7, #16]
		DataDigit3 = AsciToHex (Copy_u8BufData[4*i+12]);
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	330c      	adds	r3, #12
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff feb7 	bl	8001538 <AsciToHex>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]
		// 0x5678--->0x7856 because ARM STM32F103C8 is a little endian that means the LSB located in the smallest address.
		Data[DataCounter] = (DataDigit3 << 8) | (DataDigit2 << 12) | (DataDigit1) | (DataDigit0<<4);
 80017ce:	7dbb      	ldrb	r3, [r7, #22]
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	0212      	lsls	r2, r2, #8
 80017d4:	b211      	sxth	r1, r2
 80017d6:	7c3a      	ldrb	r2, [r7, #16]
 80017d8:	0312      	lsls	r2, r2, #12
 80017da:	b212      	sxth	r2, r2
 80017dc:	430a      	orrs	r2, r1
 80017de:	b211      	sxth	r1, r2
 80017e0:	7c7a      	ldrb	r2, [r7, #17]
 80017e2:	b212      	sxth	r2, r2
 80017e4:	430a      	orrs	r2, r1
 80017e6:	b211      	sxth	r1, r2
 80017e8:	7cba      	ldrb	r2, [r7, #18]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b212      	sxth	r2, r2
 80017ee:	430a      	orrs	r2, r1
 80017f0:	b212      	sxth	r2, r2
 80017f2:	b291      	uxth	r1, r2
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <ParseData+0x16c>)
 80017f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		DataCounter++;
 80017fa:	7dbb      	ldrb	r3, [r7, #22]
 80017fc:	3301      	adds	r3, #1
 80017fe:	75bb      	strb	r3, [r7, #22]
	for (i=0;i<CC/2; i++)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	3301      	adds	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	7cfb      	ldrb	r3, [r7, #19]
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	7dfa      	ldrb	r2, [r7, #23]
 800180e:	429a      	cmp	r2, r3
 8001810:	d3b1      	bcc.n	8001776 <ParseData+0xb2>
	}

	FPEC_voidFlashWrite(Address,Data,CC/2);
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <ParseData+0x168>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4904      	ldr	r1, [pc, #16]	; (8001830 <ParseData+0x16c>)
 8001820:	f7ff fc78 	bl	8001114 <FPEC_voidFlashWrite>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000094 	.word	0x20000094

08001834 <ParseUpperAddress>:

void ParseUpperAddress(u8* Copy_u8BufData)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	/* Hex record CRC check */
	CRC_Check(Copy_u8BufData) ;
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe93 	bl	8001568 <CRC_Check>
//	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
//
//	/* Clear Low Part of Address */
//	Address = Address & (u32)0x0000FFFF;
//	Address = Address | (u32)((u32)(DataDigit3 << 28) | (u32)(DataDigit2 << 24) | (u32)(DataDigit1 << 20) | (u32)(DataDigit0 << 16));
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <Parser_voidParseRecord>:

void Parser_voidParseRecord(u8* Copy_u8BufData)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufData[8])
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3308      	adds	r3, #8
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b30      	cmp	r3, #48	; 0x30
 800185a:	d002      	beq.n	8001862 <Parser_voidParseRecord+0x18>
 800185c:	2b34      	cmp	r3, #52	; 0x34
 800185e:	d004      	beq.n	800186a <Parser_voidParseRecord+0x20>
	{
	case '0': ParseData(Copy_u8BufData); break;
	case '4': ParseUpperAddress(Copy_u8BufData); break;
	}
}
 8001860:	e007      	b.n	8001872 <Parser_voidParseRecord+0x28>
	case '0': ParseData(Copy_u8BufData); break;
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff2e 	bl	80016c4 <ParseData>
 8001868:	e003      	b.n	8001872 <Parser_voidParseRecord+0x28>
	case '4': ParseUpperAddress(Copy_u8BufData); break;
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffe2 	bl	8001834 <ParseUpperAddress>
 8001870:	bf00      	nop
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <MRCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_voidInitSysClock(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	#elif 	RCC_CLOCK_TYPE == RCC_HSE_RC
		RCC_CR = 0X00050000;								/* Enable HSE with bypass */
		RCC_CFGR = 0X00000001;								/* Select system clock switch */
		
	#elif 	RCC_CLOCK_TYPE == RCC_HSI
		RCC_CR = 0X00000081;								/* Enable HSi + Trimming = 0 */
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <MRCC_voidInitSysClock+0x18>)
 8001882:	2281      	movs	r2, #129	; 0x81
 8001884:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0X00000000;								/* Select system clock switch */
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <MRCC_voidInitSysClock+0x1c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
			#error("you entered non valid value")
		#endif
	#else
		#error("you entered non valid clock type")
	#endif
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000
 8001898:	40021004 	.word	0x40021004

0800189c <MRCC_voidEnableClock>:


void MRCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b1f      	cmp	r3, #31
 80018b0:	d825      	bhi.n	80018fe <MRCC_voidEnableClock+0x62>
	{
		switch (Copy_u8BusId)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d00e      	beq.n	80018d6 <MRCC_voidEnableClock+0x3a>
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d016      	beq.n	80018ea <MRCC_voidEnableClock+0x4e>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d000      	beq.n	80018c2 <MRCC_voidEnableClock+0x26>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
				break;
				
			default        : 
				/* Return error */ 
				break;
 80018c0:	e01d      	b.n	80018fe <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_AHBENR,Copy_u8PerId);
 80018c2:	4911      	ldr	r1, [pc, #68]	; (8001908 <MRCC_voidEnableClock+0x6c>)
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MRCC_voidEnableClock+0x6c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	79ba      	ldrb	r2, [r7, #6]
 80018ca:	2001      	movs	r0, #1
 80018cc:	fa00 f202 	lsl.w	r2, r0, r2
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
				break;
 80018d4:	e013      	b.n	80018fe <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB1ENR,Copy_u8PerId);
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <MRCC_voidEnableClock+0x70>)
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MRCC_voidEnableClock+0x70>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	2001      	movs	r0, #1
 80018e0:	fa00 f202 	lsl.w	r2, r0, r2
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
				break;
 80018e8:	e009      	b.n	80018fe <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
 80018ea:	4909      	ldr	r1, [pc, #36]	; (8001910 <MRCC_voidEnableClock+0x74>)
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MRCC_voidEnableClock+0x74>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	2001      	movs	r0, #1
 80018f4:	fa00 f202 	lsl.w	r2, r0, r2
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
				break;
 80018fc:	bf00      	nop
	
	else
	{
		/* Return error */
	}
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40021014 	.word	0x40021014
 800190c:	4002101c 	.word	0x4002101c
 8001910:	40021018 	.word	0x40021018

08001914 <MSTK_voidInit>:



/* function to -----> Initiate STK cloclK , Disable SysTick , Disable SysTick interrupt */
void MSTK_voidInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	#if		SYSTICK_CLOCK_SOURCE == AHB_CLOCK 
		SYSTICK->CTRL = 0X00000004;				/*Set STK cloclK to AHP , Disable SysTick , Disable SysTick interrupt */
	
	#elif	SYSTICK_CLOCK_SOURCE == AHB_CLOCK_DIV_8 
		SYSTICK->CTRL = 0;						/*Set STK cloclK to AHP/8 , Disable SysTick , Disable SysTick interrupt */
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <MSTK_voidInit+0x14>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
	
	#else
		#error("invalid choice")
	
	#endif
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <MSTK_voidSetBusyWait>:

/* Synchronous function to delay for number of ticks */ 
void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	SYSTICK->LOAD = Copy_u32Ticks ;					// put Ticks to load register 
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6053      	str	r3, [r2, #4]
	SET_BIT(SYSTICK->CTRL , 0) ;					// Enable SysTick Timer
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]
	while (GET_BIT(SYSTICK->CTRL , 16) == 0) ;		// Wait till flag is raised
 8001946:	bf00      	nop
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f8      	beq.n	8001948 <MSTK_voidSetBusyWait+0x1c>
	u8 Local_u8Temporary = GET_BIT(SYSTICK->CTRL , 16) ;  //clear SysTick interrupt flag 
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
	CLR_BIT(SYSTICK->CTRL , 0) ;					// stop SysTick Timer
 8001964:	4a08      	ldr	r2, [pc, #32]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
	SYSTICK->VAL = 0;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
	SYSTICK->LOAD = 0;
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <MSTK_voidSetBusyWait+0x5c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <SysTick_Handler>:



/* ISR function of SysTick */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;
	
	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <SysTick_Handler+0x50>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d111      	bne.n	80019be <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(SYSTICK->CTRL, 1);
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <SysTick_Handler+0x54>)
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SysTick_Handler+0x54>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 0302 	bic.w	r3, r3, #2
 80019a4:	6013      	str	r3, [r2, #0]
		
		/* Stop Timer */
		CLR_BIT(SYSTICK->CTRL, 0);
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <SysTick_Handler+0x54>)
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <SysTick_Handler+0x54>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]
		SYSTICK -> LOAD = 0;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <SysTick_Handler+0x54>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
		SYSTICK -> VAL  = 0;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <SysTick_Handler+0x54>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
	}
	
	/* Callback notification */
	MSTK_CallBack();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <SysTick_Handler+0x58>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4798      	blx	r3
	
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(SYSTICK->CTRL,16);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SysTick_Handler+0x54>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000016c 	.word	0x2000016c
 80019e0:	e000e010 	.word	0xe000e010
 80019e4:	20000160 	.word	0x20000160

080019e8 <MUSART1_voidInit>:
#include "USART_config.h"

u64 Time_Out = 10000;

void MUSART1_voidInit(void) 
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	SET_BRR_Value();
 80019ec:	f000 f886 	bl	8001afc <SET_BRR_Value>
	/* clear registers */
	USART1->CR[0] = 0 ;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MUSART1_voidInit+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
	USART1->CR[1] = 0 ;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MUSART1_voidInit+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
	USART1->CR[2] = 0 ;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MUSART1_voidInit+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
	
	USART1->CR[0] |= ( (USART_WORD_LEN << 12) | (USART_PARITY << 10) | (USART_PARITY_TYPE << 9) |
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60d3      	str	r3, [r2, #12]
					   (USART_TX_INTERRUPT << 6) | (USART_RX_INTERRUPT << 5) ) ;
					   
	USART1->CR[1] |= ( (USART_STOP_BIT << 12) ) ;
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	6113      	str	r3, [r2, #16]
	
	SET_BIT(USART1->CR[0] , 2);			//RX enable
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR[0] , 3);			//TX enable
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->CR[0] , 13);		//USART enable
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a34:	60d3      	str	r3, [r2, #12]

	USART1 -> SR = 0;
 8001a36:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <MUSART1_voidInit+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40013800 	.word	0x40013800

08001a44 <MUSART1_voidTransmitSynch>:


void MUSART1_voidTransmitSynch(u8 Copy_TXData[])
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	u8 Local_u8Index = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
	while(Copy_TXData[Local_u8Index] != '\0'){
 8001a50:	e010      	b.n	8001a74 <MUSART1_voidTransmitSynch+0x30>
		USART1->DR = Copy_TXData[Local_u8Index];
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <MUSART1_voidTransmitSynch+0x48>)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	604b      	str	r3, [r1, #4]
		while(GET_BIT(USART1 -> SR, 6) == 0);
 8001a5e:	bf00      	nop
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MUSART1_voidTransmitSynch+0x48>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f8      	beq.n	8001a60 <MUSART1_voidTransmitSynch+0x1c>
		Local_u8Index++;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
	while(Copy_TXData[Local_u8Index] != '\0'){
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e8      	bne.n	8001a52 <MUSART1_voidTransmitSynch+0xe>
	}
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40013800 	.word	0x40013800

08001a90 <MUSART1_u8ReceiveSynch>:
}



u8 MUSART1_u8ReceiveSynch(void)
{
 8001a90:	b490      	push	{r4, r7}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
	u64 TimeOut = 0;
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	f04f 0400 	mov.w	r4, #0
 8001a9e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	u8 Local_u8ReceiveData = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	while(GET_BIT(USART1 -> SR, 5) == 0)
 8001aa6:	e011      	b.n	8001acc <MUSART1_u8ReceiveSynch+0x3c>
	{
		TimeOut ++;
 8001aa8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	f144 0400 	adc.w	r4, r4, #0
 8001ab2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		if (TimeOut == Time_Out)
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MUSART1_u8ReceiveSynch+0x64>)
 8001ab8:	cb18      	ldmia	r3, {r3, r4}
 8001aba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001abe:	42a2      	cmp	r2, r4
 8001ac0:	bf08      	it	eq
 8001ac2:	4299      	cmpeq	r1, r3
 8001ac4:	d102      	bne.n	8001acc <MUSART1_u8ReceiveSynch+0x3c>
		{
			Local_u8ReceiveData = 255 ;
 8001ac6:	23ff      	movs	r3, #255	; 0xff
 8001ac8:	71fb      	strb	r3, [r7, #7]
			break ;
 8001aca:	e006      	b.n	8001ada <MUSART1_u8ReceiveSynch+0x4a>
	while(GET_BIT(USART1 -> SR, 5) == 0)
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MUSART1_u8ReceiveSynch+0x68>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0e6      	beq.n	8001aa8 <MUSART1_u8ReceiveSynch+0x18>
		}
	}

	if (Local_u8ReceiveData == 0)
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <MUSART1_u8ReceiveSynch+0x56>
	{
		Local_u8ReceiveData = USART1 -> DR ;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <MUSART1_u8ReceiveSynch+0x68>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	71fb      	strb	r3, [r7, #7]
	}
	return (Local_u8ReceiveData) ;
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc90      	pop	{r4, r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	40013800 	.word	0x40013800

08001afc <SET_BRR_Value>:
	RX_Callback(USART1->DR) ;
}


static void SET_BRR_Value(void)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
	f32 Local_f32Val1 ;
	f32 Local_f32Val2 ;
	u16 Local_u16Mantissa;
	u8  Local_u8Frac;
	
	Local_f32Val1 = (((u32)CLOCK) / (16.0 * (u32)USART_BAUD_RATE)) ;
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <SET_BRR_Value+0x90>)
 8001b04:	60fb      	str	r3, [r7, #12]
	Local_u16Mantissa = Local_f32Val1 ;
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7fe ff86 	bl	8000a18 <__aeabi_f2uiz>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	817b      	strh	r3, [r7, #10]
	Local_f32Val2 = Local_f32Val1 - (u16)Local_f32Val1 ;
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7fe ff81 	bl	8000a18 <__aeabi_f2uiz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fdd8 	bl	80006d0 <__aeabi_i2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7fe fd1d 	bl	8000564 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	607b      	str	r3, [r7, #4]
	Local_f32Val2 *= 16 ;
 8001b2e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fe20 	bl	8000778 <__aeabi_fmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	607b      	str	r3, [r7, #4]
	Local_f32Val2 = round(Local_f32Val2);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7fe fc69 	bl	8000414 <__aeabi_f2d>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f000 f9ff 	bl	8001f4c <round>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7fe fcb1 	bl	80004bc <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	607b      	str	r3, [r7, #4]
	Local_u8Frac = Local_f32Val2 ;
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe ff5a 	bl	8000a18 <__aeabi_f2uiz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	70fb      	strb	r3, [r7, #3]
	Local_u16Mantissa = ( (Local_u16Mantissa << 4) | (Local_u8Frac & 0xf)) ;
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	817b      	strh	r3, [r7, #10]
	USART1->BRR = Local_u16Mantissa ;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <SET_BRR_Value+0x94>)
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	408ae38e 	.word	0x408ae38e
 8001b90:	40013800 	.word	0x40013800

08001b94 <JumpToApplication>:
typedef void (*Function_t)(void) ;
Function_t add_to_call = 0 ;


void JumpToApplication(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	EEPROM_Flag = MI2C1_voidRequestMemoryRead(EEPROM_Address , Byte_Adress) ;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <JumpToApplication+0x58>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <JumpToApplication+0x5c>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f7ff fc4d 	bl	8001444 <MI2C1_voidRequestMemoryRead>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <JumpToApplication+0x60>)
 8001bb0:	701a      	strb	r2, [r3, #0]
	volatile u32 Data = *(u32*)(0x08002404) ;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <JumpToApplication+0x64>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	607b      	str	r3, [r7, #4]
	u8TimeoutFlag = 1 ;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <JumpToApplication+0x68>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
	#define SCB_VTOR			*((volatile u32*)0XE000ED08)
	if ( (Data != 0XFFFFFFFF) && (EEPROM_Flag == 1) )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d00e      	beq.n	8001be4 <JumpToApplication+0x50>
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <JumpToApplication+0x60>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10a      	bne.n	8001be4 <JumpToApplication+0x50>
	{
		SCB_VTOR = 0X08000000 ;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <JumpToApplication+0x6c>)
 8001bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd4:	601a      	str	r2, [r3, #0]
		add_to_call = *(Function_t*)(0x08002404) ;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <JumpToApplication+0x64>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <JumpToApplication+0x70>)
 8001bdc:	6013      	str	r3, [r2, #0]
		add_to_call() ;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <JumpToApplication+0x70>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4798      	blx	r3
	}
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000012 	.word	0x20000012
 8001bf4:	20000165 	.word	0x20000165
 8001bf8:	08002404 	.word	0x08002404
 8001bfc:	20000164 	.word	0x20000164
 8001c00:	e000ed08 	.word	0xe000ed08
 8001c04:	20000168 	.word	0x20000168

08001c08 <main>:

int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	MRCC_voidInitSysClock();						/* HSI clock */
 8001c0e:	f7ff fe35 	bl	800187c <MRCC_voidInitSysClock>
	MRCC_voidEnableClock(RCC_APB1 , I2C1EN) ;		/* I2C1 Enable clock */
 8001c12:	2115      	movs	r1, #21
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fe41 	bl	800189c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2 , USART1EN) ;		/* USART1 */
 8001c1a:	210e      	movs	r1, #14
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7ff fe3d 	bl	800189c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2 , IOPAEN) ;		/* GPIOA */
 8001c22:	2102      	movs	r1, #2
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7ff fe39 	bl	800189c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2 , IOPBEN) ;		/* GPIOB */
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7ff fe35 	bl	800189c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_AHB , FLITFEN) ;		/* FPEC */
 8001c32:	2104      	movs	r1, #4
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fe31 	bl	800189c <MRCC_voidEnableClock>
	/* Set TX=PINA9 as Output alternate function push pull max speed 50 MHz  */
	MGPIO_voidSetPinDirection(PORTA , PIN9 , GPIO_OUTPUT_SPEED_50MHZ_AFPP);
 8001c3a:	220b      	movs	r2, #11
 8001c3c:	2109      	movs	r1, #9
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7fe ff0a 	bl	8000a58 <MGPIO_voidSetPinDirection>
	/* Set RX=PINA10 as input floating */
	MGPIO_voidSetPinDirection(PORTA , PIN10 , GPIO_FLOATING_INPUT);
 8001c44:	2204      	movs	r2, #4
 8001c46:	210a      	movs	r1, #10
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7fe ff05 	bl	8000a58 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(PORTA , PIN0 , GPIO_OUTPUT_SPEED_2MHZ_PP);
 8001c4e:	2202      	movs	r2, #2
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7fe ff00 	bl	8000a58 <MGPIO_voidSetPinDirection>

	/* Set direction of pins SCL1-->PINB6 and SDA1-->PINB7 as GPIO_OUTPUT_SPEED_50MHZ_AFOD */
	MGPIO_voidSetPinDirection(PORTB ,PIN6 , GPIO_OUTPUT_SPEED_50MHZ_AFOD) ;
 8001c58:	220f      	movs	r2, #15
 8001c5a:	2106      	movs	r1, #6
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7fe fefb 	bl	8000a58 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(PORTB ,PIN7 , GPIO_OUTPUT_SPEED_50MHZ_AFOD) ;
 8001c62:	220f      	movs	r2, #15
 8001c64:	2107      	movs	r1, #7
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7fe fef6 	bl	8000a58 <MGPIO_voidSetPinDirection>

	u8 flag ;
	MSTK_voidInit() ;
 8001c6c:	f7ff fe52 	bl	8001914 <MSTK_voidInit>
	MUSART1_voidInit() ;
 8001c70:	f7ff feba 	bl	80019e8 <MUSART1_voidInit>
	MI2C1_voidInit() ;
 8001c74:	f7ff fb26 	bl	80012c4 <MI2C1_voidInit>
	MSTK_voidSetBusyWait(1000000) ;
 8001c78:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <main+0xc8>)
 8001c7a:	f7ff fe57 	bl	800192c <MSTK_voidSetBusyWait>
	EEPROM_Flag = MI2C1_voidRequestMemoryRead(EEPROM_Address , Byte_Adress) ;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <main+0xcc>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <main+0xd0>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	4610      	mov	r0, r2
 8001c8a:	f7ff fbdb 	bl	8001444 <MI2C1_voidRequestMemoryRead>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <main+0xd4>)
 8001c94:	701a      	strb	r2, [r3, #0]
	HESP_voidInit() ;
 8001c96:	f7ff f873 	bl	8000d80 <HESP_voidInit>
	HESP_voidWiFiConnect();
 8001c9a:	f7ff f935 	bl	8000f08 <HESP_voidWiFiConnect>
	//MSTK_voidSetIntervalSingle(16000000,Func) ;

	while(u8TimeoutFlag == 0)
 8001c9e:	e00c      	b.n	8001cba <main+0xb2>
	{
		flag = HESP_u8GetFlag();
 8001ca0:	f7ff f88c 	bl	8000dbc <HESP_u8GetFlag>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
		if (flag == 1)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d103      	bne.n	8001cb6 <main+0xae>
		{
			HESP_u16GetHexFile() ;
 8001cae:	f7ff f8df 	bl	8000e70 <HESP_u16GetHexFile>
			Flashing() ;
 8001cb2:	f7fe ff93 	bl	8000bdc <Flashing>
		}
		else
		{
			// do nothing
		}
		JumpToApplication() ;
 8001cb6:	f7ff ff6d 	bl	8001b94 <JumpToApplication>
	while(u8TimeoutFlag == 0)
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <main+0xd8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ed      	beq.n	8001ca0 <main+0x98>
	}

	return 0 ;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	000f4240 	.word	0x000f4240
 8001cd4:	20000010 	.word	0x20000010
 8001cd8:	20000012 	.word	0x20000012
 8001cdc:	20000165 	.word	0x20000165
 8001ce0:	20000164 	.word	0x20000164

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cea:	e003      	b.n	8001cf4 <LoopCopyDataInit>

08001cec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001cee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cf2:	3104      	adds	r1, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001cf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cfc:	d3f6      	bcc.n	8001cec <CopyDataInit>
	ldr	r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001d00:	e002      	b.n	8001d08 <LoopFillZerobss>

08001d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d04:	f842 3b04 	str.w	r3, [r2], #4

08001d08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001d0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d0c:	d3f9      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0e:	f000 f837 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f000 f8ef 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7ff ff77 	bl	8001c08 <main>
	bx	lr
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d1c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001d20:	080020f4 	.word	0x080020f4
	ldr	r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d28:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001d2c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001d30:	20003c08 	.word	0x20003c08

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>

08001d36 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
	...

08001d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <SystemInit+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <SystemInit+0x5c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001d90:	4912      	ldr	r1, [pc, #72]	; (8001ddc <SystemInit+0x5c>)
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <SystemInit+0x5c>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <SystemInit+0x60>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d9c:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <SystemInit+0x5c>)
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <SystemInit+0x5c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <SystemInit+0x5c>)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <SystemInit+0x5c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <SystemInit+0x5c>)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <SystemInit+0x5c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dc2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <SystemInit+0x5c>)
 8001dc6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dca:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001dcc:	f000 f80c 	bl	8001de8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SystemInit+0x64>)
 8001dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	f8ff0000 	.word	0xf8ff0000
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001dec:	f000 f802 	bl	8001df4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e02:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e0e:	4b37      	ldr	r3, [pc, #220]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <SetSysClockTo72+0x38>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e2a:	d1f0      	bne.n	8001e0e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	e001      	b.n	8001e42 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d14b      	bne.n	8001ee0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f043 0310 	orr.w	r3, r3, #16
 8001e52:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <SetSysClockTo72+0xfc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001e92:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <SetSysClockTo72+0xf8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001e9e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001eac:	bf00      	nop
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <SetSysClockTo72+0xf8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f9      	beq.n	8001eae <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 0303 	bic.w	r3, r3, #3
 8001ec4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <SetSysClockTo72+0xf8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001ed2:	bf00      	nop
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SetSysClockTo72+0xf8>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d1f9      	bne.n	8001ed4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	4e0c      	ldr	r6, [pc, #48]	; (8001f2c <__libc_init_array+0x38>)
 8001efa:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efc:	1ba4      	subs	r4, r4, r6
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	42a5      	cmp	r5, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	f000 f868 	bl	8001fd8 <_init>
 8001f08:	2500      	movs	r5, #0
 8001f0a:	4e0a      	ldr	r6, [pc, #40]	; (8001f34 <__libc_init_array+0x40>)
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <__libc_init_array+0x44>)
 8001f0e:	1ba4      	subs	r4, r4, r6
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	42a5      	cmp	r5, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f1c:	4798      	blx	r3
 8001f1e:	3501      	adds	r5, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f26:	4798      	blx	r3
 8001f28:	3501      	adds	r5, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	080020ec 	.word	0x080020ec
 8001f30:	080020ec 	.word	0x080020ec
 8001f34:	080020ec 	.word	0x080020ec
 8001f38:	080020f0 	.word	0x080020f0

08001f3c <memset>:
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4402      	add	r2, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <round>:
 8001f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8001f52:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8001f56:	2c13      	cmp	r4, #19
 8001f58:	4606      	mov	r6, r0
 8001f5a:	460d      	mov	r5, r1
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	468e      	mov	lr, r1
 8001f60:	dc17      	bgt.n	8001f92 <round+0x46>
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	da09      	bge.n	8001f7a <round+0x2e>
 8001f66:	3401      	adds	r4, #1
 8001f68:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8001f6c:	d103      	bne.n	8001f76 <round+0x2a>
 8001f6e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8001f72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001f76:	2200      	movs	r2, #0
 8001f78:	e029      	b.n	8001fce <round+0x82>
 8001f7a:	4916      	ldr	r1, [pc, #88]	; (8001fd4 <round+0x88>)
 8001f7c:	4121      	asrs	r1, r4
 8001f7e:	420d      	tst	r5, r1
 8001f80:	d100      	bne.n	8001f84 <round+0x38>
 8001f82:	b188      	cbz	r0, 8001fa8 <round+0x5c>
 8001f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f88:	4123      	asrs	r3, r4
 8001f8a:	4473      	add	r3, lr
 8001f8c:	ea23 0301 	bic.w	r3, r3, r1
 8001f90:	e7f1      	b.n	8001f76 <round+0x2a>
 8001f92:	2c33      	cmp	r4, #51	; 0x33
 8001f94:	dd0b      	ble.n	8001fae <round+0x62>
 8001f96:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001f9a:	d105      	bne.n	8001fa8 <round+0x5c>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	f7fe f8da 	bl	8000158 <__adddf3>
 8001fa4:	4606      	mov	r6, r0
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	4630      	mov	r0, r6
 8001faa:	4629      	mov	r1, r5
 8001fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8001fb6:	40f8      	lsrs	r0, r7
 8001fb8:	4206      	tst	r6, r0
 8001fba:	d0f5      	beq.n	8001fa8 <round+0x5c>
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8001fc2:	40a1      	lsls	r1, r4
 8001fc4:	198a      	adds	r2, r1, r6
 8001fc6:	bf28      	it	cs
 8001fc8:	3301      	addcs	r3, #1
 8001fca:	ea22 0200 	bic.w	r2, r2, r0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	e7e7      	b.n	8001fa4 <round+0x58>
 8001fd4:	000fffff 	.word	0x000fffff

08001fd8 <_init>:
 8001fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fda:	bf00      	nop
 8001fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	469e      	mov	lr, r3
 8001fe2:	4770      	bx	lr

08001fe4 <_fini>:
 8001fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe6:	bf00      	nop
 8001fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fea:	bc08      	pop	{r3}
 8001fec:	469e      	mov	lr, r3
 8001fee:	4770      	bx	lr
